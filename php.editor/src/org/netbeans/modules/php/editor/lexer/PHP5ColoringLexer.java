/* The following code was generated by JFlex 1.4.3 on 17/03/22 10:10 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2016 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2016 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;
import org.netbeans.modules.web.common.api.ByteStack;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17/03/22 10:10 from the specification file
 * <tt>/home/junichi11/hg/web-main/php.editor/tools/Php5ColoringScanner.flex</tt>
 */
public class PHP5ColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP_END_NOWDOC = 22;
  public static final int ST_PHP_NOWDOC = 18;
  public static final int ST_PHP_END_HEREDOC = 16;
  public static final int ST_PHP_COMMENT = 28;
  public static final int ST_PHP_START_HEREDOC = 14;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 8;
  public static final int ST_PHP_IN_SCRIPTING = 2;
  public static final int ST_PHP_LOOKING_FOR_CLASS_CONST = 10;
  public static final int ST_PHP_DOC_COMMENT = 30;
  public static final int ST_PHP_LINE_COMMENT = 32;
  public static final int ST_PHP_BACKQUOTE = 6;
  public static final int ST_PHP_START_NOWDOC = 20;
  public static final int ST_PHP_HEREDOC = 12;
  public static final int ST_HALTED_COMPILER = 36;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 34;
  public static final int ST_PHP_VAR_OFFSET = 26;
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_DOUBLE_QUOTES = 4;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
    16, 16, 17, 17, 18, 18
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\16\1\15\2\0\1\21\22\0\1\16\1\32\1\23\1\121"+
    "\1\22\1\36\1\37\1\103\1\112\1\70\1\34\1\31\1\17\1\4"+
    "\1\2\1\35\1\5\1\11\10\1\1\110\1\20\1\33\1\27\1\30"+
    "\1\43\1\42\1\46\1\10\1\73\1\50\1\3\1\7\1\100\1\102"+
    "\1\74\1\113\1\107\1\77\1\105\1\47\1\44\1\75\1\115\1\45"+
    "\1\72\1\76\1\101\1\111\1\106\1\6\1\104\1\13\1\117\1\24"+
    "\1\120\1\41\1\114\1\25\1\57\1\63\1\67\1\65\1\66\1\54"+
    "\1\62\1\102\1\51\1\113\1\107\1\55\1\105\1\52\1\56\1\71"+
    "\1\115\1\61\1\60\1\53\1\101\1\64\1\106\1\6\1\104\1\13"+
    "\1\26\1\40\1\116\1\42\53\13\1\13\12\13\1\13\4\13\1\13"+
    "\5\13\27\13\1\13\37\13\1\13\10\13\u01c2\12\4\0\14\12\16\0"+
    "\5\12\7\0\1\12\1\0\1\12\201\0\5\12\1\0\2\12\2\0"+
    "\4\12\10\0\1\12\1\0\3\12\1\0\1\12\1\0\24\12\1\0"+
    "\123\12\1\0\213\12\10\0\236\12\11\0\46\12\2\0\1\12\7\0"+
    "\47\12\110\0\33\12\5\0\3\12\55\0\53\12\25\0\12\14\4\0"+
    "\2\12\1\0\143\12\1\0\1\12\17\0\2\12\7\0\2\12\12\14"+
    "\3\12\2\0\1\12\20\0\1\12\1\0\36\12\35\0\131\12\13\0"+
    "\1\12\16\0\12\14\41\12\11\0\2\12\4\0\1\12\5\0\26\12"+
    "\4\0\1\12\11\0\1\12\3\0\1\12\27\0\31\12\107\0\1\12"+
    "\1\0\13\12\127\0\66\12\3\0\1\12\22\0\1\12\7\0\12\12"+
    "\4\0\12\14\1\0\7\12\1\0\7\12\5\0\10\12\2\0\2\12"+
    "\2\0\26\12\1\0\7\12\1\0\1\12\3\0\4\12\3\0\1\12"+
    "\20\0\1\12\15\0\2\12\1\0\3\12\4\0\12\14\2\12\23\0"+
    "\6\12\4\0\2\12\2\0\26\12\1\0\7\12\1\0\2\12\1\0"+
    "\2\12\1\0\2\12\37\0\4\12\1\0\1\12\7\0\12\14\2\0"+
    "\3\12\20\0\11\12\1\0\3\12\1\0\26\12\1\0\7\12\1\0"+
    "\2\12\1\0\5\12\3\0\1\12\22\0\1\12\17\0\2\12\4\0"+
    "\12\14\25\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0"+
    "\2\12\1\0\5\12\3\0\1\12\36\0\2\12\1\0\3\12\4\0"+
    "\12\14\1\0\1\12\21\0\1\12\1\0\6\12\3\0\3\12\1\0"+
    "\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0\2\12\3\0"+
    "\3\12\3\0\14\12\26\0\1\12\25\0\12\14\25\0\10\12\1\0"+
    "\3\12\1\0\27\12\1\0\12\12\1\0\5\12\3\0\1\12\32\0"+
    "\2\12\6\0\2\12\4\0\12\14\25\0\10\12\1\0\3\12\1\0"+
    "\27\12\1\0\12\12\1\0\5\12\3\0\1\12\40\0\1\12\1\0"+
    "\2\12\4\0\12\14\1\0\2\12\22\0\10\12\1\0\3\12\1\0"+
    "\51\12\2\0\1\12\20\0\1\12\21\0\2\12\4\0\12\14\12\0"+
    "\6\12\5\0\22\12\3\0\30\12\1\0\11\12\1\0\1\12\2\0"+
    "\7\12\72\0\60\12\1\0\2\12\14\0\7\12\11\0\12\14\47\0"+
    "\2\12\1\0\1\12\2\0\2\12\1\0\1\12\2\0\1\12\6\0"+
    "\4\12\1\0\7\12\1\0\3\12\1\0\1\12\1\0\1\12\2\0"+
    "\2\12\1\0\4\12\1\0\2\12\11\0\1\12\2\0\5\12\1\0"+
    "\1\12\11\0\12\14\2\0\4\12\40\0\1\12\37\0\12\14\26\0"+
    "\10\12\1\0\44\12\33\0\5\12\163\0\53\12\24\0\1\12\12\14"+
    "\6\0\6\12\4\0\4\12\3\0\1\12\3\0\2\12\7\0\3\12"+
    "\4\0\15\12\14\0\1\12\1\0\12\14\6\0\46\12\1\0\1\12"+
    "\5\0\1\12\2\0\53\12\1\0\u014d\12\1\0\4\12\2\0\7\12"+
    "\1\0\1\12\1\0\4\12\2\0\51\12\1\0\4\12\2\0\41\12"+
    "\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\17\12"+
    "\1\0\71\12\1\0\4\12\2\0\103\12\45\0\20\12\20\0\125\12"+
    "\14\0\u026c\12\2\0\21\12\1\0\32\12\5\0\113\12\25\0\15\12"+
    "\1\0\4\12\16\0\22\12\16\0\22\12\16\0\15\12\1\0\3\12"+
    "\17\0\64\12\43\0\1\12\4\0\1\12\3\0\12\14\46\0\12\14"+
    "\6\0\130\12\10\0\51\12\1\0\1\12\5\0\106\12\12\0\35\12"+
    "\51\0\12\14\36\12\2\0\5\12\13\0\54\12\25\0\7\12\10\0"+
    "\12\14\46\0\27\12\11\0\65\12\53\0\12\14\6\0\12\14\15\0"+
    "\1\12\135\0\57\12\21\0\7\12\4\0\12\14\51\0\36\12\15\0"+
    "\2\12\12\14\54\12\32\0\44\12\34\0\12\14\3\0\3\12\12\14"+
    "\44\12\153\0\4\12\1\0\4\12\3\0\2\12\11\0\300\12\100\0"+
    "\u0116\12\2\0\6\12\2\0\46\12\2\0\6\12\2\0\10\12\1\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\37\12\2\0\65\12\1\0"+
    "\7\12\1\0\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0"+
    "\6\12\4\0\15\12\5\0\3\12\1\0\7\12\164\0\1\12\15\0"+
    "\1\12\20\0\15\12\145\0\1\12\4\0\1\12\2\0\12\12\1\0"+
    "\1\12\3\0\5\12\6\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\4\12\1\0\13\12\2\0\4\12\5\0\5\12\4\0\1\12\64\0"+
    "\2\12\u0a7b\0\57\12\1\0\57\12\1\0\205\12\6\0\4\12\3\0"+
    "\2\12\14\0\46\12\1\0\1\12\5\0\1\12\2\0\70\12\7\0"+
    "\1\12\20\0\27\12\11\0\7\12\1\0\7\12\1\0\7\12\1\0"+
    "\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12\120\0"+
    "\1\12\u01d5\0\2\12\52\0\5\12\5\0\2\12\4\0\126\12\6\0"+
    "\3\12\1\0\132\12\1\0\4\12\5\0\51\12\3\0\136\12\21\0"+
    "\33\12\65\0\20\12\u0200\0\u19b6\12\112\0\u51cd\12\63\0\u048d\12\103\0"+
    "\56\12\2\0\u010d\12\3\0\20\12\12\14\2\12\24\0\57\12\20\0"+
    "\31\12\10\0\106\12\61\0\11\12\2\0\147\12\2\0\4\12\1\0"+
    "\4\12\14\0\13\12\115\0\12\12\1\0\3\12\1\0\4\12\1\0"+
    "\27\12\35\0\64\12\16\0\62\12\34\0\12\14\30\0\6\12\3\0"+
    "\1\12\4\0\12\14\34\12\12\0\27\12\31\0\35\12\7\0\57\12"+
    "\34\0\1\12\12\14\46\0\51\12\27\0\3\12\1\0\10\12\4\0"+
    "\12\14\6\0\27\12\3\0\1\12\5\0\60\12\1\0\1\12\3\0"+
    "\2\12\2\0\5\12\2\0\1\12\1\0\1\12\30\0\3\12\2\0"+
    "\13\12\7\0\3\12\14\0\6\12\2\0\6\12\2\0\6\12\11\0"+
    "\7\12\1\0\7\12\221\0\43\12\15\0\12\14\6\0\u2ba4\12\14\0"+
    "\27\12\4\0\61\12\u2104\0\u016e\12\2\0\152\12\46\0\7\12\14\0"+
    "\5\12\5\0\1\12\1\0\12\12\1\0\15\12\1\0\5\12\1\0"+
    "\1\12\1\0\2\12\1\0\2\12\1\0\154\12\41\0\u016b\12\22\0"+
    "\100\12\2\0\66\12\50\0\14\12\164\0\5\12\1\0\207\12\23\0"+
    "\12\14\7\0\32\12\6\0\32\12\13\0\131\12\3\0\6\12\2\0"+
    "\6\12\2\0\6\12\2\0\3\12\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\23\0\2\1\1\2\1\3\1\4\1\5\1\6\1\3"+
    "\4\5\1\7\1\4\1\10\1\4\1\11\1\12\1\13"+
    "\1\14\14\6\1\4\22\5\1\2\2\5\1\4\1\5"+
    "\1\4\1\5\1\15\1\16\1\17\1\20\1\21\2\20"+
    "\1\17\3\20\3\22\2\23\4\20\1\2\1\20\2\24"+
    "\3\2\1\0\1\2\2\25\1\2\1\26\1\27\1\26"+
    "\1\3\1\30\1\3\1\31\1\30\1\32\4\0\4\33"+
    "\2\34\1\35\1\36\1\37\1\0\1\40\1\41\1\0"+
    "\1\3\2\0\6\5\1\42\2\0\4\5\1\0\1\5"+
    "\1\0\1\43\2\0\1\20\2\0\2\6\1\0\1\44"+
    "\1\45\1\46\1\47\4\5\1\50\4\5\1\51\1\5"+
    "\1\52\32\5\1\0\2\5\1\53\12\0\1\5\3\0"+
    "\2\54\2\55\1\56\1\57\1\55\3\0\1\54\2\55"+
    "\1\60\4\0\1\20\2\0\1\61\2\0\1\62\7\0"+
    "\1\63\2\0\1\64\1\0\1\65\1\54\1\0\1\66"+
    "\1\0\1\67\1\70\1\33\1\71\1\72\3\0\7\5"+
    "\2\3\1\73\3\5\1\0\1\5\3\0\4\5\1\74"+
    "\4\5\1\75\3\5\1\76\5\5\1\77\12\5\1\100"+
    "\14\5\1\101\2\5\12\0\10\5\3\102\1\0\1\103"+
    "\1\0\1\104\1\0\1\105\1\20\1\0\1\106\1\0"+
    "\1\106\1\0\1\107\1\110\1\33\2\0\1\111\6\5"+
    "\1\112\1\113\1\114\6\5\4\0\1\115\5\5\1\116"+
    "\11\5\1\117\2\5\1\120\1\121\3\5\1\122\1\5"+
    "\1\123\1\124\4\5\1\125\12\5\12\0\11\5\1\0"+
    "\1\103\1\0\1\33\1\126\1\0\3\5\1\127\3\5"+
    "\1\130\1\5\1\131\1\132\1\5\1\133\2\134\3\0"+
    "\3\5\1\135\10\5\1\136\1\5\1\137\1\140\1\141"+
    "\5\5\1\142\1\143\1\5\1\144\1\145\1\5\1\146"+
    "\3\5\1\147\1\150\1\151\10\0\1\152\1\0\11\5"+
    "\1\153\1\33\1\0\1\5\1\154\3\5\1\155\3\5"+
    "\3\0\1\156\13\5\1\157\1\160\1\161\1\162\4\5"+
    "\1\163\1\164\5\0\11\5\1\23\1\33\1\1\1\165"+
    "\4\5\1\166\1\167\1\5\2\170\1\0\1\171\2\5"+
    "\1\172\1\173\3\5\1\174\5\5\1\175\3\0\3\5"+
    "\1\176\5\5\1\33\1\0\3\5\1\177\1\200\1\0"+
    "\1\5\1\201\5\5\1\202\1\5\1\203\1\204\1\5"+
    "\1\0\1\205\3\5\1\206\3\5\1\33\1\0\2\5"+
    "\1\207\1\37\1\5\1\210\1\211\1\212\3\5\1\213"+
    "\1\0\2\5\1\214\1\215\2\5\1\33\1\0\1\216"+
    "\1\217\1\5\1\220\1\5\1\221\1\222\3\5\1\223"+
    "\1\33\1\0\5\5\1\0\1\224\1\225\1\226\2\5"+
    "\1\0\1\227\1\5\1\0\1\5\1\0\1\230\14\0"+
    "\1\231\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[724];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\244\0\366\0\u0148\0\u019a\0\u01ec\0\u023e"+
    "\0\u0290\0\u02e2\0\u0334\0\u0386\0\u03d8\0\u042a\0\u047c\0\u04ce"+
    "\0\u0520\0\u0572\0\u05c4\0\u0616\0\u0668\0\u06ba\0\u070c\0\u075e"+
    "\0\u07b0\0\u0802\0\u0854\0\u08a6\0\u08f8\0\u094a\0\u099c\0\u09ee"+
    "\0\u06ba\0\u06ba\0\u0a40\0\u0a92\0\u06ba\0\u06ba\0\u06ba\0\u0ae4"+
    "\0\u0b36\0\u0b88\0\u0bda\0\u0c2c\0\u0c7e\0\u0cd0\0\u0d22\0\u0d74"+
    "\0\u0dc6\0\u0e18\0\u06ba\0\u0e6a\0\u0ebc\0\u0f0e\0\u0f60\0\u0fb2"+
    "\0\u1004\0\u1056\0\u10a8\0\u10fa\0\u114c\0\u119e\0\u11f0\0\u1242"+
    "\0\u1294\0\u12e6\0\u1338\0\u138a\0\u13dc\0\u142e\0\u1480\0\u14d2"+
    "\0\u1524\0\u1576\0\u15c8\0\u161a\0\u166c\0\u06ba\0\u06ba\0\u16be"+
    "\0\u1710\0\u06ba\0\u1762\0\u17b4\0\u1806\0\u1858\0\u18aa\0\u18fc"+
    "\0\u06ba\0\u194e\0\u19a0\0\u06ba\0\u19f2\0\u1a44\0\u1a96\0\u1ae8"+
    "\0\u1b3a\0\u1b8c\0\u19a0\0\u06ba\0\u1bde\0\u1c30\0\u1c82\0\u1cd4"+
    "\0\u1d26\0\u1d26\0\u06ba\0\u1d78\0\u1dca\0\u06ba\0\u1e1c\0\u1e6e"+
    "\0\u1ec0\0\u06ba\0\u1f12\0\u06ba\0\u1f64\0\u06ba\0\u1fb6\0\u2008"+
    "\0\u205a\0\u20ac\0\u20fe\0\u06ba\0\u2150\0\u21a2\0\u21f4\0\u2246"+
    "\0\u06ba\0\u2298\0\u05c4\0\u22ea\0\u233c\0\u238e\0\u23e0\0\u2432"+
    "\0\u2484\0\u24d6\0\u2528\0\u257a\0\u25cc\0\u261e\0\u2670\0\u26c2"+
    "\0\u06ba\0\u2714\0\u2766\0\u27b8\0\u280a\0\u285c\0\u28ae\0\u2900"+
    "\0\u2952\0\u1480\0\u29a4\0\u0a92\0\u29f6\0\u06ba\0\u2a48\0\u2a9a"+
    "\0\u2aec\0\u2b3e\0\u2b90\0\u2be2\0\u2c34\0\u2c86\0\u099c\0\u2cd8"+
    "\0\u2d2a\0\u2d7c\0\u2dce\0\u099c\0\u2e20\0\u2e72\0\u2ec4\0\u2f16"+
    "\0\u099c\0\u2f68\0\u099c\0\u2fba\0\u300c\0\u305e\0\u30b0\0\u3102"+
    "\0\u3154\0\u31a6\0\u31f8\0\u324a\0\u329c\0\u32ee\0\u3340\0\u3392"+
    "\0\u33e4\0\u3436\0\u3488\0\u34da\0\u352c\0\u357e\0\u35d0\0\u3622"+
    "\0\u3674\0\u36c6\0\u3718\0\u376a\0\u37bc\0\u380e\0\u3860\0\u38b2"+
    "\0\u06ba\0\u3904\0\u3956\0\u161a\0\u39a8\0\u39fa\0\u3a4c\0\u3a9e"+
    "\0\u3af0\0\u3b42\0\u3b94\0\u3be6\0\u3c38\0\u1762\0\u3c8a\0\u3cdc"+
    "\0\u3d2e\0\u3c38\0\u06ba\0\u06ba\0\u06ba\0\u3c8a\0\u3d80\0\u18aa"+
    "\0\u3dd2\0\u3e24\0\u3d80\0\u3dd2\0\u06ba\0\u3e76\0\u3ec8\0\u3f1a"+
    "\0\u3f6c\0\u3fbe\0\u4010\0\u1bde\0\u06ba\0\u4062\0\u1c30\0\u06ba"+
    "\0\u40b4\0\u1c82\0\u1cd4\0\u4106\0\u4158\0\u41aa\0\u1d78\0\u06ba"+
    "\0\u41fc\0\u1dca\0\u06ba\0\u424e\0\u06ba\0\u42a0\0\u42f2\0\u06ba"+
    "\0\u4344\0\u06ba\0\u06ba\0\u4396\0\u43e8\0\u06ba\0\u443a\0\u448c"+
    "\0\u1ec0\0\u44de\0\u4530\0\u4582\0\u45d4\0\u4626\0\u4678\0\u46ca"+
    "\0\u2714\0\u2766\0\u471c\0\u476e\0\u47c0\0\u4812\0\u4864\0\u48b6"+
    "\0\u4908\0\u495a\0\u49ac\0\u49fe\0\u4a50\0\u4aa2\0\u4af4\0\u099c"+
    "\0\u4b46\0\u4b98\0\u4bea\0\u4c3c\0\u099c\0\u4c8e\0\u4ce0\0\u4d32"+
    "\0\u4c8e\0\u4d84\0\u4dd6\0\u4e28\0\u4e7a\0\u4ecc\0\u099c\0\u4f1e"+
    "\0\u4f70\0\u4fc2\0\u5014\0\u5066\0\u50b8\0\u510a\0\u515c\0\u51ae"+
    "\0\u5200\0\u099c\0\u5252\0\u52a4\0\u52f6\0\u5348\0\u539a\0\u53ec"+
    "\0\u543e\0\u5490\0\u54e2\0\u5534\0\u5586\0\u55d8\0\u099c\0\u562a"+
    "\0\u567c\0\u56ce\0\u5720\0\u5772\0\u57c4\0\u5816\0\u5868\0\u58ba"+
    "\0\u590c\0\u595e\0\u59b0\0\u5a02\0\u5a54\0\u5aa6\0\u5af8\0\u5b4a"+
    "\0\u5b9c\0\u5bee\0\u5c40\0\u06ba\0\u16be\0\u1806\0\u5c92\0\u5ce4"+
    "\0\u5d36\0\u06ba\0\u5d88\0\u06ba\0\u5dda\0\u5e2c\0\u06ba\0\u5e7e"+
    "\0\u1d26\0\u5ed0\0\u06ba\0\u06ba\0\u5f22\0\u5f74\0\u5fc6\0\u099c"+
    "\0\u6018\0\u606a\0\u60bc\0\u610e\0\u6160\0\u61b2\0\u6204\0\u099c"+
    "\0\u099c\0\u6256\0\u62a8\0\u62fa\0\u634c\0\u639e\0\u63f0\0\u6442"+
    "\0\u6494\0\u64e6\0\u6538\0\u49ac\0\u658a\0\u65dc\0\u662e\0\u6680"+
    "\0\u66d2\0\u099c\0\u6724\0\u6776\0\u67c8\0\u681a\0\u686c\0\u68be"+
    "\0\u6910\0\u6962\0\u69b4\0\u099c\0\u6a06\0\u6a58\0\u099c\0\u099c"+
    "\0\u6aaa\0\u6afc\0\u6b4e\0\u099c\0\u6ba0\0\u099c\0\u099c\0\u6bf2"+
    "\0\u6c44\0\u6c96\0\u6ce8\0\u099c\0\u6d3a\0\u6d8c\0\u6dde\0\u6e30"+
    "\0\u6e82\0\u6ed4\0\u6f26\0\u6f78\0\u6fca\0\u701c\0\u706e\0\u70c0"+
    "\0\u7112\0\u7164\0\u71b6\0\u7208\0\u725a\0\u72ac\0\u72fe\0\u7350"+
    "\0\u73a2\0\u73f4\0\u7446\0\u7498\0\u74ea\0\u753c\0\u758e\0\u75e0"+
    "\0\u7632\0\u7684\0\u06ba\0\u76d6\0\u7728\0\u06ba\0\u777a\0\u77cc"+
    "\0\u781e\0\u7870\0\u099c\0\u78c2\0\u7914\0\u7966\0\u099c\0\u79b8"+
    "\0\u099c\0\u7a0a\0\u7a5c\0\u099c\0\u06ba\0\u7aae\0\u7b00\0\u7b52"+
    "\0\u7ba4\0\u7bf6\0\u7c48\0\u7c9a\0\u099c\0\u7cec\0\u7d3e\0\u7d90"+
    "\0\u7de2\0\u7e34\0\u7e86\0\u7ed8\0\u7f2a\0\u099c\0\u7f7c\0\u099c"+
    "\0\u099c\0\u099c\0\u7fce\0\u8020\0\u8072\0\u80c4\0\u8116\0\u099c"+
    "\0\u099c\0\u8168\0\u099c\0\u099c\0\u81ba\0\u099c\0\u820c\0\u825e"+
    "\0\u82b0\0\u099c\0\u8302\0\u099c\0\u8354\0\u83a6\0\u83f8\0\u844a"+
    "\0\u849c\0\u84ee\0\u8540\0\u8592\0\u06ba\0\u85e4\0\u8636\0\u8688"+
    "\0\u86da\0\u872c\0\u877e\0\u87d0\0\u8822\0\u8874\0\u88c6\0\u8918"+
    "\0\u896a\0\u89bc\0\u8a0e\0\u8a60\0\u8ab2\0\u8b04\0\u8b56\0\u099c"+
    "\0\u8ba8\0\u8bfa\0\u8c4c\0\u8c9e\0\u8cf0\0\u8d42\0\u099c\0\u8d94"+
    "\0\u8de6\0\u8e38\0\u8e8a\0\u8edc\0\u8f2e\0\u8f80\0\u8fd2\0\u9024"+
    "\0\u9076\0\u90c8\0\u099c\0\u099c\0\u099c\0\u099c\0\u911a\0\u916c"+
    "\0\u91be\0\u9210\0\u099c\0\u099c\0\u9262\0\u92b4\0\u9306\0\u9358"+
    "\0\u93aa\0\u93fc\0\u944e\0\u94a0\0\u94f2\0\u9544\0\u9596\0\u95e8"+
    "\0\u963a\0\u968c\0\u96de\0\u9730\0\u9782\0\u099c\0\u97d4\0\u9826"+
    "\0\u9878\0\u98ca\0\u099c\0\u099c\0\u991c\0\u06ba\0\u996e\0\u99c0"+
    "\0\u9a12\0\u9a64\0\u9ab6\0\u099c\0\u099c\0\u9b08\0\u9b5a\0\u9bac"+
    "\0\u9bfe\0\u9c50\0\u9ca2\0\u9cf4\0\u9d46\0\u9d98\0\u099c\0\u9dea"+
    "\0\u9e3c\0\u9e8e\0\u9ee0\0\u9f32\0\u9f84\0\u099c\0\u9fd6\0\ua028"+
    "\0\ua07a\0\ua0cc\0\ua11e\0\ua170\0\ua1c2\0\ua214\0\ua266\0\ua2b8"+
    "\0\u099c\0\u099c\0\ua30a\0\ua35c\0\u099c\0\ua3ae\0\ua400\0\ua452"+
    "\0\ua4a4\0\ua4f6\0\u099c\0\ua548\0\u099c\0\u099c\0\ua59a\0\ua5ec"+
    "\0\u099c\0\ua63e\0\ua690\0\ua6e2\0\u099c\0\ua734\0\ua786\0\ua7d8"+
    "\0\ua82a\0\ua87c\0\ua8ce\0\ua920\0\u099c\0\ua972\0\ua9c4\0\u099c"+
    "\0\u099c\0\u099c\0\uaa16\0\uaa68\0\uaaba\0\u099c\0\uab0c\0\uab5e"+
    "\0\uabb0\0\u099c\0\u099c\0\uac02\0\uac54\0\uaca6\0\uacf8\0\u099c"+
    "\0\u099c\0\uad4a\0\u099c\0\uad9c\0\u099c\0\u06ba\0\uadee\0\uae40"+
    "\0\uae92\0\u099c\0\ua972\0\uaee4\0\uaf36\0\uaf88\0\uafda\0\ub02c"+
    "\0\ub07e\0\ub0d0\0\u099c\0\u099c\0\u099c\0\ub122\0\ub174\0\ub1c6"+
    "\0\u099c\0\ub218\0\ub26a\0\ub2bc\0\ub30e\0\u099c\0\ub360\0\ub3b2"+
    "\0\ub404\0\ub456\0\ub4a8\0\ub4fa\0\ub54c\0\ub59e\0\ub5f0\0\ub642"+
    "\0\ub694\0\ub6e6\0\u06ba\0\ub738";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[724];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\33\24\1\25\66\24\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\27\2\37\1\26\2\40"+
    "\1\41\1\42\1\40\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\70\1\73\1\74\1\75\1\65"+
    "\1\67\1\76\1\66\1\77\1\100\1\101\1\71\1\31"+
    "\1\102\1\41\1\103\1\104\1\102\1\105\1\103\1\73"+
    "\1\75\1\77\1\106\1\37\1\107\1\110\1\37\1\111"+
    "\1\37\1\112\1\113\1\114\1\37\1\115\1\37\1\116"+
    "\2\41\1\117\22\120\1\121\1\122\1\123\1\120\1\124"+
    "\73\120\22\125\1\126\1\125\1\127\1\122\1\130\73\125"+
    "\4\131\1\132\21\131\1\133\73\131\67\134\1\135\3\134"+
    "\1\135\26\134\15\136\1\137\3\136\1\140\1\141\1\136"+
    "\1\142\1\136\1\143\73\136\3\144\1\145\2\144\3\145"+
    "\1\144\2\145\30\144\24\145\1\144\12\145\1\144\4\145"+
    "\1\144\1\145\1\144\3\145\4\144\3\26\1\146\2\26"+
    "\3\146\1\26\2\146\1\26\1\0\26\26\24\146\1\26"+
    "\12\146\1\26\4\146\1\26\1\146\1\26\3\146\4\26"+
    "\3\147\1\150\2\147\3\150\2\147\1\150\1\147\1\151"+
    "\3\147\1\152\22\147\24\150\1\147\12\150\1\147\4\150"+
    "\1\147\1\150\1\147\3\150\4\147\3\153\1\154\2\153"+
    "\3\154\1\153\2\154\30\153\24\154\1\153\12\154\1\153"+
    "\4\154\1\153\1\154\1\153\3\154\4\153\3\26\1\155"+
    "\2\26\3\155\1\26\2\155\1\26\1\0\26\26\24\155"+
    "\1\26\12\155\1\26\4\155\1\26\1\155\1\26\3\155"+
    "\4\26\3\156\1\157\1\160\1\156\3\157\1\156\2\157"+
    "\1\156\2\40\2\156\1\40\22\156\24\157\1\156\12\157"+
    "\1\156\4\157\1\156\1\157\1\156\3\157\4\156\1\26"+
    "\1\161\1\162\1\37\1\26\1\163\3\37\1\161\2\37"+
    "\1\26\2\164\2\162\1\164\1\165\1\162\1\164\2\162"+
    "\6\26\1\162\5\26\1\162\24\37\1\162\12\37\1\164"+
    "\4\37\1\162\1\37\1\162\3\37\1\162\1\41\1\166"+
    "\1\164\34\167\1\170\65\167\34\171\1\172\65\171\15\173"+
    "\1\174\3\173\1\175\11\173\1\176\2\173\1\177\4\173"+
    "\1\200\56\173\15\201\2\202\2\201\1\202\100\201\122\203"+
    "\33\24\1\204\121\24\1\0\2\24\1\205\4\24\1\206"+
    "\5\24\1\0\1\24\1\0\4\24\1\207\1\0\5\24"+
    "\3\0\20\24\1\0\7\24\123\0\1\27\1\210\1\211"+
    "\1\0\1\27\3\0\1\27\54\0\1\211\34\0\1\210"+
    "\1\212\2\0\1\210\3\0\1\210\15\0\1\63\73\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\213\6\37\27\0"+
    "\3\37\1\214\2\37\1\214\2\37\1\215\6\37\1\216"+
    "\2\37\1\217\1\0\2\37\1\217\3\37\1\215\3\37"+
    "\1\0\1\37\1\220\2\37\1\0\1\216\1\0\3\37"+
    "\10\0\1\63\22\0\1\63\1\221\72\0\1\27\1\210"+
    "\1\211\1\0\1\27\1\222\1\0\1\223\1\27\51\0"+
    "\1\223\2\0\1\211\34\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\1\65\11\37\1\65\11\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\1\224\1\37\1\225"+
    "\2\37\1\226\4\37\1\224\1\225\10\37\1\0\3\37"+
    "\1\226\4\37\1\227\1\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\6\0\1\44\7\0\1\230\10\0\1\37\1\231\13\37"+
    "\1\231\6\37\1\0\12\37\1\232\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\24\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\21\0\2\40\2\0\1\40\103\0\1\233"+
    "\2\0\3\233\1\0\2\233\30\0\24\233\1\0\12\233"+
    "\1\0\4\233\1\0\1\233\1\0\3\233\4\0\22\234"+
    "\1\235\1\236\1\237\1\234\1\240\73\234\27\0\1\62"+
    "\1\63\120\0\1\63\1\62\120\0\1\63\1\0\1\63"+
    "\117\0\1\62\121\0\1\241\1\63\2\0\1\242\1\0"+
    "\1\243\113\0\1\63\4\0\1\62\114\0\1\63\4\0"+
    "\1\244\1\117\113\0\1\63\1\245\120\0\1\63\7\0"+
    "\1\63\111\0\1\63\10\0\1\63\110\0\1\63\122\0"+
    "\1\246\12\0\1\63\57\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\1\37\1\247\13\37\1\247\6\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\250\1\0\10\37\27\0\22\37\1\250"+
    "\1\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\3\37\1\251"+
    "\4\37\27\0\1\37\1\252\1\37\1\253\2\37\1\253"+
    "\5\37\1\254\1\252\1\37\1\251\4\37\1\0\1\37"+
    "\1\254\10\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\255\1\0\10\37\27\0\2\37"+
    "\1\256\10\37\1\256\6\37\1\255\1\37\1\0\10\37"+
    "\1\257\1\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\260\1\0\10\37\27\0\1\261"+
    "\4\37\1\262\4\37\1\261\7\37\1\260\1\37\1\0"+
    "\3\37\1\262\6\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\2\37\1\263"+
    "\5\37\27\0\3\37\1\264\2\37\1\265\1\266\1\263"+
    "\3\37\1\267\7\37\1\0\1\37\1\267\10\37\1\0"+
    "\1\37\1\270\2\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\1\37\1\271"+
    "\13\37\1\271\6\37\1\0\11\37\1\272\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\1\224\1\37\1\225\2\37\1\226"+
    "\3\37\1\273\1\224\1\225\10\37\1\0\3\37\1\226"+
    "\4\37\1\227\1\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\5\37\1\274\16\37\1\0\3\37\1\274\6\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\275\1\0\10\37\27\0\7\37\1\276\12\37\1\275"+
    "\1\37\1\0\5\37\1\277\4\37\1\0\2\37\1\300"+
    "\1\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\1\301\10\37\1\302\1\301"+
    "\11\37\1\0\6\37\1\302\3\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\6\0\1\44\7\0\1\230\10\0\1\37\1\231"+
    "\10\37\1\303\2\37\1\231\6\37\1\0\12\37\1\232"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\2\37\1\304\7\37\1\305"+
    "\1\304\10\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\1\306\1\37\1\307\6\37\1\310\1\306\1\307"+
    "\10\37\1\0\6\37\1\310\3\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\1\37\1\311\1\312\10\37\1\312\1\37"+
    "\1\311\6\37\1\0\10\37\1\313\1\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\275"+
    "\1\0\10\37\27\0\7\37\1\277\12\37\1\275\1\37"+
    "\1\0\5\37\1\277\4\37\1\0\2\37\1\300\1\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\2\37\1\263\5\37\27\0\3\37\1\264\2\37"+
    "\1\264\1\37\1\263\3\37\1\267\7\37\1\0\1\37"+
    "\1\267\10\37\1\0\1\37\1\270\2\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\3\37\1\314\2\37\1\314\5\37\1\315\7\37"+
    "\1\0\1\37\1\315\10\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\4\0\24\232\1\316\56\232\1\236\16\232"+
    "\1\0\1\37\1\0\1\37\1\0\10\37\27\0\5\37"+
    "\1\317\16\37\1\0\3\37\1\317\6\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\24\37\1\0\11\37\1\320\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\114\0\1\321\12\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\2\37\1\304"+
    "\10\37\1\304\10\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\13\0\1\322\1\323\5\0\1\324"+
    "\25\0\1\325\1\326\1\327\1\0\1\330\1\331\2\0"+
    "\1\322\1\0\1\325\1\327\1\332\1\326\1\0\1\323"+
    "\1\0\1\330\4\0\1\332\1\0\1\331\4\0\1\333"+
    "\21\0\1\37\1\0\1\37\1\0\10\37\27\0\24\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\1\37"+
    "\1\334\1\37\4\0\22\120\1\335\1\0\1\336\1\120"+
    "\1\337\76\120\1\340\2\120\3\340\1\120\1\341\1\340"+
    "\6\120\1\342\1\343\1\336\1\120\1\344\15\120\24\340"+
    "\1\120\12\340\1\120\4\340\1\120\1\340\1\120\3\340"+
    "\150\120\1\345\1\343\1\336\1\120\1\346\73\120\22\125"+
    "\1\347\1\125\1\350\1\0\1\351\76\125\1\340\2\125"+
    "\3\340\1\125\1\352\1\340\6\125\1\353\1\125\1\350"+
    "\1\343\1\344\15\125\24\340\1\125\12\340\1\125\4\340"+
    "\1\125\1\340\1\125\3\340\150\125\1\345\1\125\1\350"+
    "\1\343\1\354\73\125\30\0\1\355\113\0\1\345\154\0"+
    "\1\356\21\0\1\356\22\0\15\136\1\0\3\136\1\0"+
    "\1\357\1\136\1\360\1\136\1\361\76\136\1\362\2\136"+
    "\3\362\1\136\2\362\1\136\1\0\3\136\1\0\1\357"+
    "\1\136\1\360\1\136\1\361\15\136\24\362\1\136\12\362"+
    "\1\136\4\362\1\136\1\362\1\136\3\362\7\136\1\362"+
    "\2\136\3\362\1\136\2\362\1\136\1\363\3\136\1\0"+
    "\1\357\1\136\1\360\1\136\1\361\15\136\24\362\1\136"+
    "\12\362\1\136\4\362\1\136\1\362\1\136\3\362\4\136"+
    "\3\0\1\340\2\0\3\340\1\0\2\340\12\0\1\344"+
    "\15\0\24\340\1\0\12\340\1\0\4\340\1\0\1\340"+
    "\1\0\3\340\4\0\122\136\1\0\1\364\1\0\1\364"+
    "\1\0\10\364\1\365\2\0\1\366\1\365\22\0\24\364"+
    "\1\0\12\364\1\0\4\364\1\0\1\364\1\0\3\364"+
    "\5\0\1\367\1\0\1\367\1\0\10\367\1\370\2\0"+
    "\1\371\1\370\22\0\24\367\1\0\12\367\1\0\4\367"+
    "\1\0\1\367\1\0\3\367\4\0\15\372\1\151\3\372"+
    "\1\151\101\372\1\373\1\372\1\373\1\372\5\373\1\372"+
    "\1\373\1\372\1\0\2\372\1\374\1\0\22\372\24\373"+
    "\1\372\12\373\1\372\4\373\1\372\1\373\1\372\3\373"+
    "\7\372\1\375\2\372\3\375\1\372\1\376\1\375\1\372"+
    "\1\151\3\372\1\151\22\372\24\375\1\372\12\375\1\372"+
    "\4\375\1\372\1\375\1\372\3\375\4\372\1\0\1\377"+
    "\1\0\1\377\1\0\10\377\1\u0100\2\0\1\u0101\1\u0100"+
    "\22\0\24\377\1\0\12\377\1\0\4\377\1\0\1\377"+
    "\1\0\3\377\5\0\1\u0102\1\0\1\u0102\1\0\10\u0102"+
    "\1\u0103\2\0\1\u0104\1\u0103\22\0\24\u0102\1\0\12\u0102"+
    "\1\0\4\u0102\1\0\1\u0102\1\0\3\u0102\5\0\1\157"+
    "\1\0\1\157\1\0\10\157\27\0\24\157\1\0\12\157"+
    "\1\0\4\157\1\0\1\157\1\0\3\157\34\0\1\u0105"+
    "\72\0\1\161\3\0\1\161\3\0\1\161\111\0\1\161"+
    "\3\0\1\161\1\222\2\0\1\161\113\0\1\u0106\2\0"+
    "\3\u0106\1\0\2\u0106\30\0\24\u0106\1\0\12\u0106\1\0"+
    "\4\u0106\1\0\1\u0106\1\0\3\u0106\4\0\34\167\1\u0107"+
    "\121\167\1\u0107\1\u0108\64\167\34\171\1\u0109\121\171\1\u0109"+
    "\1\u010a\64\171\15\173\1\174\3\173\1\174\14\173\1\174"+
    "\4\173\1\174\56\173\15\0\1\u010b\104\0\15\173\1\174"+
    "\3\173\1\174\13\173\1\u010c\1\174\4\173\1\174\56\173"+
    "\30\0\1\u010d\121\0\1\246\106\0\2\202\2\0\1\202"+
    "\100\0\33\24\1\0\2\24\1\0\4\24\1\0\5\24"+
    "\1\0\1\24\1\0\4\24\2\0\5\24\3\0\20\24"+
    "\1\0\7\24\27\0\1\u010e\121\0\1\u010e\41\0\1\u010f"+
    "\3\0\1\u010f\113\0\1\u0110\3\0\1\u0110\27\0\1\210"+
    "\1\0\1\211\1\0\1\210\3\0\1\210\54\0\1\211"+
    "\34\0\1\161\2\0\1\u0111\1\161\3\0\1\161\17\0"+
    "\1\u0111\72\0\1\63\120\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\5\37\1\u0112\1\37\1\u0113\14\37\1\0"+
    "\3\37\1\u0112\1\37\1\u0113\4\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\4\37\1\u0114\14\37\1\u0114\2\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\14\37\1\u0115"+
    "\7\37\1\0\1\37\1\u0115\10\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\2\37\1\u0116\10\37\1\u0116\10\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\24\37\1\0"+
    "\11\37\1\u0117\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\24\37"+
    "\1\0\1\u0118\3\37\1\u0118\5\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\u0119\1\0\1\u0119\1\0"+
    "\1\u0119\1\0\3\u0119\34\0\1\u0119\1\0\1\u0119\3\0"+
    "\1\u0119\2\0\1\u0119\3\0\1\u0119\1\0\3\u0119\3\0"+
    "\1\u0119\33\0\1\u011a\3\0\1\u011a\111\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\1\37\1\u011b\13\37\1\u011b"+
    "\6\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\11\37\1\u011c\12\37\1\0\6\37\1\u011c\3\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\3\37\1\u011d\2\37\1\u011d"+
    "\15\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\3\37\1\u011e\2\37\1\u011e\15\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\37\0\1\u011f\67\0"+
    "\1\37\1\0\1\u0120\1\0\10\37\27\0\22\37\1\u0120"+
    "\1\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\233\1\0\1\233\1\0\10\233\27\0"+
    "\24\233\1\0\12\233\1\0\4\233\1\0\1\233\1\0"+
    "\3\233\4\0\3\234\1\0\2\234\3\0\2\234\1\0"+
    "\6\234\1\235\1\236\1\237\1\234\1\0\15\234\24\0"+
    "\1\234\12\0\1\234\4\0\1\234\1\0\1\234\3\0"+
    "\150\234\1\0\1\236\1\237\1\234\1\240\73\234\30\0"+
    "\1\63\120\0\1\63\3\0\1\u0121\146\0\1\u0122\11\0"+
    "\1\u0122\63\0\1\u0123\102\0\2\245\2\0\1\245\115\0"+
    "\2\246\2\0\1\246\101\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\7\37\1\u0124\14\37\1\0\5\37\1\u0124"+
    "\4\37\1\0\4\37\1\0\1\37\1\0\2\37\1\u0125"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\14\37"+
    "\1\u0126\7\37\1\0\1\37\1\u0126\10\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\1\37\1\u0127\13\37\1\u0127\6\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\4\37"+
    "\1\247\14\37\1\247\2\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\24\37\1\0\12\37\1\0\2\37"+
    "\1\u0128\1\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\24\37\1\0\12\37"+
    "\1\0\1\37\1\u0129\2\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\11\37"+
    "\1\u012a\12\37\1\0\6\37\1\u012a\3\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\2\37\1\u012b\5\37\27\0\10\37\1\u012b\12\37"+
    "\1\u012c\1\0\2\37\1\u012c\7\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\u012d\1\0"+
    "\10\37\27\0\22\37\1\u012d\1\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\7\37\1\u012e\4\37\1\u012f"+
    "\6\37\1\u0130\1\0\1\37\1\u012f\1\u0130\2\37\1\u012e"+
    "\4\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\7\37\1\u0131"+
    "\4\37\1\u012f\6\37\1\u0130\1\0\1\37\1\u012f\1\u0130"+
    "\2\37\1\u012e\4\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\22\37\1\u0132\1\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\14\37\1\u0133\7\37\1\0\1\37\1\u0133"+
    "\10\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\24\37\1\0"+
    "\1\u0134\3\37\1\u0134\5\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\2\37\1\u0135\10\37\1\u0135\10\37\1\0\10\37"+
    "\1\u0136\1\37\1\0\1\u0137\3\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\1\37\1\u0138\13\37\1\u0138\6\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\12\37\1\u0139\11\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\14\37\1\u013a"+
    "\7\37\1\0\1\37\1\u013a\10\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\11\37\1\u013b\12\37\1\0\6\37\1\u013b"+
    "\3\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\2\37\1\u013c"+
    "\10\37\1\u013c\1\37\1\u013d\6\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\2\37\1\u013c\10\37\1\u013c"+
    "\10\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\5\37\1\u013e\16\37\1\0\3\37\1\u013e\6\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\7\37\1\u013f\14\37\1\0"+
    "\5\37\1\u013f\4\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\1\u0140\11\37\1\u0140\11\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\12\37\1\u0141\11\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\1\37\1\u0142\13\37"+
    "\1\u0142\6\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\5\37\1\u0143\16\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\3\37\1\u0144\2\37\1\u0144\15\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\7\37"+
    "\1\u0145\1\37\1\u0146\2\37\1\u0147\7\37\1\0\1\37"+
    "\1\u0147\3\37\1\u0145\1\u0146\3\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\1\u0148\1\37\1\u0149\7\37\1\u0148\1\u0149"+
    "\10\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\1\u014a\4\37\1\u014b\4\37\1\u014a\11\37\1\0\3\37"+
    "\1\u014b\6\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\1\37"+
    "\1\u014c\13\37\1\u014c\6\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\3\37\1\u014d\4\37\27\0\17\37\1\u014d\4\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\14\37"+
    "\1\u014e\7\37\1\0\1\37\1\u014e\10\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u014f"+
    "\1\0\10\37\27\0\22\37\1\u014f\1\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\4\0\122\232"+
    "\1\0\1\37\1\0\1\u0150\1\0\10\37\27\0\22\37"+
    "\1\u0150\1\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\5\37\1\u0151\16\37\1\0\3\37\1\u0151\6\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\61\0\1\u0152"+
    "\21\0\1\u0152\66\0\1\u0153\4\0\1\u0154\4\0\1\u0153"+
    "\15\0\1\u0154\35\0\1\u0155\52\0\1\u0155\41\0\1\u0156"+
    "\62\0\1\u0156\100\0\1\u0157\13\0\1\u0157\104\0\1\u0158"+
    "\11\0\1\u0158\112\0\1\u0159\2\0\1\u0159\122\0\1\u015a"+
    "\22\0\1\u015a\72\0\1\u015b\2\0\1\u015b\50\0\1\37"+
    "\1\0\1\37\1\0\2\37\1\u015c\5\37\27\0\3\37"+
    "\1\u015d\1\u015e\1\37\1\u015d\1\u015f\1\u015c\1\u0160\7\37"+
    "\1\u015e\1\37\1\u0161\1\0\2\37\1\u0161\2\37\1\u015f"+
    "\1\u0160\2\37\1\u0162\1\0\1\37\1\u0163\2\37\1\0"+
    "\1\37\1\0\3\37\4\0\3\120\1\0\2\120\3\0"+
    "\2\120\1\0\6\120\1\342\1\343\1\336\1\120\1\0"+
    "\15\120\24\0\1\120\12\0\1\120\4\0\1\120\1\0"+
    "\1\120\3\0\26\120\1\0\1\343\1\336\1\120\1\346"+
    "\73\120\1\0\1\340\1\0\1\340\1\0\10\340\27\0"+
    "\24\340\1\0\12\340\1\0\4\340\1\0\1\340\1\0"+
    "\3\340\1\0\1\u0164\2\0\1\120\1\341\1\120\1\341"+
    "\1\120\10\341\5\120\1\335\1\0\1\336\1\120\1\337"+
    "\15\120\24\341\1\120\12\341\1\120\4\341\1\120\1\341"+
    "\1\120\3\341\1\120\1\u0165\2\120\3\125\1\0\2\125"+
    "\3\0\2\125\1\0\6\125\1\353\1\125\1\350\1\343"+
    "\1\0\15\125\24\0\1\125\12\0\1\125\4\0\1\125"+
    "\1\0\1\125\3\0\26\125\1\0\1\125\1\350\1\343"+
    "\1\354\74\125\1\352\1\125\1\352\1\125\10\352\5\125"+
    "\1\347\1\125\1\350\1\0\1\351\15\125\24\352\1\125"+
    "\12\352\1\125\4\352\1\125\1\352\1\125\3\352\1\125"+
    "\1\u0166\2\125\46\0\1\u0167\10\0\1\u0167\42\0\3\136"+
    "\1\u0168\2\136\3\u0168\2\136\1\u0168\1\136\1\0\3\136"+
    "\1\0\1\u0169\1\136\1\360\1\136\1\u016a\15\136\24\u0168"+
    "\1\136\12\u0168\1\136\4\u0168\1\136\1\u0168\1\136\3\u0168"+
    "\21\136\1\0\3\136\1\0\115\136\1\0\3\136\1\0"+
    "\1\u016a\1\136\1\360\1\136\1\u016b\74\136\1\362\1\136"+
    "\1\362\1\136\10\362\1\u016c\2\136\1\u016d\1\u016c\1\357"+
    "\1\136\1\360\1\136\1\361\15\136\24\362\1\136\12\362"+
    "\1\136\4\362\1\136\1\362\1\136\3\362\4\136\3\0"+
    "\1\u016e\2\0\3\u016e\1\0\2\u016e\30\0\24\u016e\1\0"+
    "\12\u016e\1\0\4\u016e\1\0\1\u016e\1\0\3\u016e\21\0"+
    "\1\365\3\0\1\365\115\0\1\370\3\0\1\370\100\0"+
    "\15\372\1\0\3\372\1\0\101\372\1\375\1\372\1\375"+
    "\1\372\5\375\1\376\1\375\1\376\1\u016f\2\372\1\u0170"+
    "\1\u016f\22\372\24\375\1\372\12\375\1\372\4\375\1\372"+
    "\1\375\1\372\3\375\5\372\1\376\1\372\1\376\1\372"+
    "\10\376\1\u0171\2\372\1\u0172\1\u0171\22\372\24\376\1\372"+
    "\12\376\1\372\4\376\1\372\1\376\1\372\3\376\4\372"+
    "\15\0\1\u0100\3\0\1\u0100\115\0\1\u0103\3\0\1\u0103"+
    "\101\0\1\u0106\1\0\1\u0106\1\0\10\u0106\27\0\24\u0106"+
    "\1\0\12\u0106\1\0\4\u0106\1\0\1\u0106\1\0\3\u0106"+
    "\4\0\34\167\1\u0107\1\u0173\64\167\34\171\1\u0109\1\u0174"+
    "\64\171\15\173\1\174\3\173\1\174\14\173\1\174\4\173"+
    "\1\174\14\173\1\u0175\11\173\1\u0175\27\173\15\0\2\u010d"+
    "\2\0\1\u010d\202\0\1\u0176\64\0\1\u0177\13\0\1\u0177"+
    "\41\0\1\37\1\0\1\37\1\0\10\37\27\0\7\37"+
    "\1\u0178\14\37\1\0\5\37\1\u0178\4\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u0179"+
    "\1\0\10\37\27\0\22\37\1\u0179\1\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\2\37\1\u017a\5\37\27\0\4\37"+
    "\1\u017b\1\u017c\2\37\1\u017a\3\37\1\u017d\4\37\1\u017b"+
    "\2\37\1\0\1\37\1\u017d\1\37\1\u017c\6\37\1\0"+
    "\2\37\1\u017e\1\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\u017f\1\0\10\37\27\0\22\37\1\u017f"+
    "\1\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\11\37\1\u0180\12\37\1\0\6\37\1\u0180\3\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\1\u0181\11\37\1\u0181\11\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\7\37"+
    "\1\u0182\14\37\1\0\5\37\1\u0182\4\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u0183"+
    "\1\0\10\37\27\0\22\37\1\u0183\1\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\14\37\1\u0184\7\37"+
    "\1\0\1\37\1\u0184\10\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\2\37\1\u0185\10\37\1\u0185\10\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\23\37\1\u0186\1\0"+
    "\2\37\1\u0186\7\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\37\0\1\u0121\67\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\2\37\1\u0187\10\37\1\u0187\10\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\7\0"+
    "\1\u0188\2\0\3\u0188\1\0\2\u0188\2\0\1\u0121\4\0"+
    "\1\u0189\20\0\24\u0188\1\0\12\u0188\1\u018a\4\u0188\1\0"+
    "\1\u0188\1\0\3\u0188\73\0\1\u018b\3\0\1\u018b\43\0"+
    "\2\u018c\2\0\1\u018c\101\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\24\37\1\0\10\37\1\u018d\1\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\24\37\1\0\10\37\1\u018e"+
    "\1\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\7\37\1\u018f"+
    "\14\37\1\0\5\37\1\u018f\4\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\2\37\1\u0190\10\37\1\u0190\10\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\u0191\1\0\10\37\27\0\22\37\1\u0191"+
    "\1\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\11\37\1\u0192\12\37\1\0\6\37\1\u0192\3\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\2\37\1\u0193\10\37\1\u0193"+
    "\10\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\11\37\1\u0194\12\37\1\0\6\37\1\u0194\3\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\u0195\1\0\10\37\27\0\22\37\1\u0195\1\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\7\37\1\u0196"+
    "\14\37\1\0\5\37\1\u0196\4\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\11\37\1\u0197\12\37\1\0\6\37\1\u0197"+
    "\3\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\15\37\1\u0198"+
    "\6\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u0199\1\0\10\37\27\0"+
    "\22\37\1\u0199\1\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\11\37\1\u019a\12\37\1\0\6\37\1\u019a"+
    "\3\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\5\37\1\u019b"+
    "\16\37\1\0\3\37\1\u019b\6\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\u019c\1\0"+
    "\10\37\27\0\22\37\1\u019c\1\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\1\u019d\11\37\1\u019d\11\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\13\37"+
    "\1\u019e\10\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\7\37\1\u019f\14\37\1\0\5\37\1\u019f\4\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\2\37\1\u01a0\5\37\27\0\10\37"+
    "\1\u01a0\13\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\7\37\1\u01a1\14\37\1\0\5\37\1\u01a1\4\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\5\37\1\u01a2\16\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\7\37"+
    "\1\u01a3\14\37\1\0\5\37\1\u01a3\4\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\1\u01a4\11\37\1\u01a4\11\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\3\37\1\u01a5\4\37\27\0"+
    "\17\37\1\u01a5\4\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\11\37\1\u01a6\12\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\21\37\1\u01a7\2\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\7\37\1\u01a8"+
    "\4\37\1\u01a9\7\37\1\0\1\37\1\u01a9\3\37\1\u01a8"+
    "\4\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\23\37\1\u01aa"+
    "\1\0\2\37\1\u01aa\7\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\11\37\1\u01ab\12\37\1\0\6\37\1\u01ab\3\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\u01ac\1\0\10\37\27\0\22\37\1\u01ac\1\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\3\37"+
    "\1\u01ad\2\37\1\u01ad\15\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\14\37\1\u01ae\7\37\1\0\1\37"+
    "\1\u01ae\10\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\7\37"+
    "\1\u01af\14\37\1\0\5\37\1\u01af\4\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\3\37\1\u01b0\2\37\1\u01b0\11\37"+
    "\1\u01b1\3\37\1\0\12\37\1\0\4\37\1\0\1\u01b1"+
    "\1\0\3\37\5\0\1\37\1\0\1\u01b2\1\0\10\37"+
    "\27\0\22\37\1\u01b2\1\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\11\37\1\u01b3\12\37\1\0\6\37"+
    "\1\u01b3\3\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\u01b4\1\0\10\37\27\0\22\37"+
    "\1\u01b4\1\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\11\37\1\u01b5\12\37\1\0\6\37\1\u01b5\3\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\11\37\1\u01b6\12\37"+
    "\1\0\6\37\1\u01b6\3\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\50\0\1\u01b7\11\0\1\u01b7\107\0\1\u01b8"+
    "\11\0\1\u01b8\112\0\1\u01b9\2\0\1\u01b9\162\0\1\u01ba"+
    "\54\0\1\u01bb\10\0\1\u01bb\107\0\1\u01bc\13\0\1\u01bc"+
    "\141\0\1\u01bd\73\0\1\u01be\22\0\1\u01be\70\0\1\u01bf"+
    "\13\0\1\u01bf\120\0\1\u01c0\11\0\1\u01c0\30\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\5\37\1\u01c1\16\37"+
    "\1\0\3\37\1\u01c1\4\37\1\u01c2\1\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\2\37\1\u01c3\10\37\1\u01c3\10\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\5\37"+
    "\1\u01c4\16\37\1\0\3\37\1\u01c4\6\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\1\37\1\u01c5\13\37\1\u01c5\6\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\5\37"+
    "\1\u01c6\16\37\1\0\3\37\1\u01c6\6\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\11\37\1\u01c7\12\37\1\0\6\37"+
    "\1\u01c7\3\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\2\37"+
    "\1\u01c8\10\37\1\u01c8\10\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u01c9"+
    "\1\0\10\37\27\0\22\37\1\u01c9\1\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\64\0\1\u01ca"+
    "\11\0\1\u01ca\30\0\1\u0168\1\0\1\u0168\1\0\10\u0168"+
    "\27\0\24\u0168\1\0\12\u0168\1\0\4\u0168\1\0\1\u0168"+
    "\1\0\3\u0168\1\0\1\u01cb\2\0\3\136\1\0\2\136"+
    "\3\0\2\136\1\0\1\136\1\0\3\136\1\0\1\u0169"+
    "\1\136\1\360\1\136\1\0\15\136\24\0\1\136\12\0"+
    "\1\136\4\0\1\136\1\0\1\136\3\0\21\136\1\0"+
    "\3\136\2\0\1\136\1\360\1\136\1\u016b\110\136\1\u016c"+
    "\3\136\1\u016c\1\357\1\136\1\360\1\136\1\361\73\136"+
    "\1\0\1\u016e\1\0\1\u016e\1\0\10\u016e\1\u016c\2\0"+
    "\1\u01cc\1\u016c\22\0\24\u016e\1\0\12\u016e\1\0\4\u016e"+
    "\1\0\1\u016e\1\0\3\u016e\4\0\15\372\1\u016f\3\372"+
    "\1\u016f\115\372\1\u0171\3\372\1\u0171\100\372\15\173\1\174"+
    "\3\173\1\174\14\173\1\174\4\173\1\174\23\173\1\u01cd"+
    "\3\173\1\u01cd\26\173\71\0\1\u01ce\3\0\1\u01ce\75\0"+
    "\1\u01cf\22\0\1\u01cf\26\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\3\37\1\u01d0\2\37\1\u01d0\15\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\1\u01d1\11\37"+
    "\1\u01d1\11\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\u01d2\1\0\10\37"+
    "\27\0\22\37\1\u01d2\1\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\2\37\1\u01d3\5\37\27\0\10\37\1\u01d3\13\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\24\37"+
    "\1\0\12\37\1\0\2\37\1\u01d4\1\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\24\37\1\0\11\37\1\u01d5\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\5\37\1\u01d6\16\37\1\0\3\37\1\u01d6"+
    "\6\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\24\37\1\0"+
    "\12\37\1\0\1\u01d7\3\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\2\37"+
    "\1\u01d8\10\37\1\u01d8\10\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u01d9"+
    "\1\0\10\37\27\0\22\37\1\u01d9\1\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\11\37\1\u01da\12\37"+
    "\1\0\6\37\1\u01da\3\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\7\37\1\u01db\14\37\1\0\5\37\1\u01db\4\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\24\37\1\0\12\37"+
    "\1\0\3\37\1\u01dc\1\0\1\37\1\0\3\37\5\0"+
    "\1\u0188\1\0\1\u0188\1\0\10\u0188\1\u01dd\3\0\1\u01de"+
    "\22\0\24\u0188\1\0\12\u0188\1\0\4\u0188\1\0\1\u0188"+
    "\1\0\3\u0188\7\0\1\u01df\2\0\3\u01df\1\0\2\u01df"+
    "\30\0\24\u01df\1\0\12\u01df\1\0\4\u01df\1\0\1\u01df"+
    "\1\0\3\u01df\7\0\1\u01e0\2\0\3\u01e0\1\0\2\u01e0"+
    "\30\0\24\u01e0\1\0\12\u01e0\1\0\4\u01e0\1\0\1\u01e0"+
    "\1\0\3\u01e0\51\0\1\u01e1\13\0\1\u01e1\41\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\1\37\1\u01e2\13\37"+
    "\1\u01e2\6\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\5\37\1\u01e3\16\37\1\0\3\37\1\u01e3\6\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\1\37\1\u01e4\13\37"+
    "\1\u01e4\6\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\24\37\1\0\12\37\1\0\1\u01e5\3\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\14\37\1\u01e6\7\37\1\0\1\37\1\u01e6"+
    "\10\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\24\37\1\0"+
    "\10\37\1\u01e7\1\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\2\37\1\u01e8\10\37\1\u01e8\10\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\1\37\1\u01e9\13\37\1\u01e9"+
    "\6\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u01ea\1\0\10\37\27\0"+
    "\2\37\1\u01eb\10\37\1\u01eb\6\37\1\u01ea\1\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\24\37\1\0"+
    "\10\37\1\u01ec\1\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\13\37\1\u01ed\10\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\7\37\1\u01ee\14\37\1\0\5\37\1\u01ee"+
    "\4\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\u01ef\1\0\10\37\27\0\22\37\1\u01ef"+
    "\1\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\7\37\1\u01f0\14\37\1\0\5\37\1\u01f0\4\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\24\37\1\0\12\37\1\0"+
    "\2\37\1\u01f1\1\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\7\37\1\u01f2"+
    "\14\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\5\37\1\u01f3\16\37\1\0\3\37\1\u01f3\6\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\6\37\1\u01f4\15\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\23\37\1\u01f5"+
    "\1\0\2\37\1\u01f5\7\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\2\37\1\u01f6\10\37\1\u01f6\10\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\5\37\1\u01f7\16\37"+
    "\1\0\3\37\1\u01f7\6\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\7\37\1\u01f8\14\37\1\0\5\37\1\u01f8\4\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\24\37\1\0\11\37"+
    "\1\u01f9\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\2\37\1\u01fa"+
    "\10\37\1\u01fa\10\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\u01fb\1\0"+
    "\10\37\27\0\22\37\1\u01fb\1\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\14\37\1\u01fc\7\37\1\0"+
    "\1\37\1\u01fc\10\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u01fd\1\0\10\37\27\0"+
    "\22\37\1\u01fd\1\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\7\37\1\u01fe\14\37\1\0\5\37\1\u01fe"+
    "\4\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\2\37\1\u01ff"+
    "\10\37\1\u01ff\10\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\3\37\1\u0200\2\37\1\u0200\15\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\5\37\1\u0201"+
    "\16\37\1\0\3\37\1\u0201\6\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\7\37\1\u0202\14\37\1\0\5\37\1\u0202"+
    "\4\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\4\37\1\u0203"+
    "\14\37\1\u0203\2\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\u0204\1\0"+
    "\10\37\27\0\22\37\1\u0204\1\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\52\0\1\u0205\10\0"+
    "\1\u0205\117\0\1\u0206\21\0\1\u0206\70\0\1\u0207\10\0"+
    "\1\u0207\45\0\1\u0208\62\0\1\u0208\110\0\1\u0209\21\0"+
    "\1\u0209\70\0\1\u020a\10\0\1\u020a\52\0\1\u020b\52\0"+
    "\1\u020b\41\0\1\u020c\12\0\1\u0209\47\0\1\u020c\1\0"+
    "\1\u020d\102\0\1\u020e\22\0\1\u020e\30\0\1\u0205\62\0"+
    "\1\u0205\34\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\11\37\1\u020f\12\37\1\0\6\37\1\u020f\3\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\3\37\1\u0210\2\37\1\u0210"+
    "\15\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\24\37\1\0\12\37\1\0\1\37\1\u0211\2\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\1\37\1\u0212\13\37\1\u0212\6\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\2\37\1\u0213"+
    "\10\37\1\u0213\10\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\3\37\1\u0214\2\37\1\u0214\15\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\2\37\1\u0215"+
    "\10\37\1\u0215\10\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\11\37\1\u0216\12\37\1\0\6\37\1\u0216"+
    "\3\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\7\37\1\u0217"+
    "\14\37\1\0\5\37\1\u0217\4\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\64\0\1\u0218\11\0\1\u0218\44\0"+
    "\1\u016c\3\0\1\u016c\100\0\15\173\1\174\3\173\1\174"+
    "\14\173\1\174\4\173\1\174\1\173\1\u0219\13\173\1\u0219"+
    "\40\173\71\0\1\u021a\3\0\1\u021a\25\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\4\37\1\u021b\14\37\1\u021b"+
    "\2\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\1\37\1\u021c\13\37\1\u021c\6\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\23\37\1\u021d\1\0\2\37"+
    "\1\u021d\7\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\5\37"+
    "\1\u021e\16\37\1\0\3\37\1\u021e\6\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\5\37\1\u021f\16\37\1\0\3\37"+
    "\1\u021f\6\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\2\37\1\u0220\5\37"+
    "\27\0\10\37\1\u0220\13\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\23\37\1\u0221\1\0\2\37\1\u0221"+
    "\7\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\11\37\1\u0222"+
    "\12\37\1\0\6\37\1\u0222\3\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\5\37\1\u0223\16\37\1\0\3\37\1\u0223"+
    "\6\37\1\0\4\37\1\0\1\37\1\0\3\37\21\0"+
    "\1\u01dd\105\0\1\u01df\1\0\1\u01df\1\0\10\u01df\6\0"+
    "\1\u0224\20\0\24\u01df\1\0\12\u01df\1\0\4\u01df\1\0"+
    "\1\u01df\1\0\3\u01df\5\0\1\u01e0\1\0\1\u01e0\1\0"+
    "\10\u01e0\27\0\24\u01e0\1\0\12\u01e0\1\u0225\4\u01e0\1\0"+
    "\1\u01e0\1\0\3\u01e0\55\0\1\u0226\22\0\1\u0226\26\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\3\37\1\u0227"+
    "\2\37\1\u0227\15\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\1\37\1\u0228\13\37\1\u0228\6\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\2\37\1\u0229"+
    "\10\37\1\u0229\10\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\24\37\1\0\1\u022a\3\37\1\u022a\5\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\11\37\1\u022b\12\37"+
    "\1\0\6\37\1\u022b\3\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\1\37\1\u022c\13\37\1\u022c\6\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\2\37\1\u022d\5\37\27\0\10\37"+
    "\1\u022d\13\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\2\37\1\u022e\10\37\1\u022e\10\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\3\37\1\u022f\2\37"+
    "\1\u022f\15\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\4\37\1\u0230\14\37\1\u0230\2\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\17\37\1\u0231\4\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\24\37"+
    "\1\0\12\37\1\0\1\37\1\u0232\2\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\23\37\1\u0233\1\0\2\37\1\u0233\7\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\16\37\1\u0234\5\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\24\37\1\0"+
    "\11\37\1\u0235\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\11\37"+
    "\1\u0236\12\37\1\0\6\37\1\u0236\3\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\3\37\1\u0237\2\37\1\u0237\15\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\3\37\1\u0238\4\37"+
    "\27\0\17\37\1\u0238\4\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\23\37\1\u0239\1\0\2\37\1\u0239"+
    "\7\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\7\37\1\u023a"+
    "\14\37\1\0\5\37\1\u023a\4\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\7\37\1\u023b\14\37\1\0\5\37\1\u023b"+
    "\4\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\23\37\1\u023c"+
    "\1\0\2\37\1\u023c\7\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\2\u023d\2\0\1\u023d\22\0\24\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\57\0\1\u0209\22\0"+
    "\1\u0209\26\0\1\u023e\12\0\1\u0209\47\0\1\u023e\1\0"+
    "\1\u020d\76\0\1\u020a\13\0\1\u020a\127\0\1\u0205\3\0"+
    "\1\u0205\44\0\1\u0209\51\0\1\u020d\135\0\1\u0209\72\0"+
    "\1\u023f\21\0\1\u023f\104\0\1\u0240\15\0\1\u0240\70\0"+
    "\1\u0241\2\0\1\u0241\50\0\1\37\1\0\1\u0242\1\0"+
    "\10\37\27\0\22\37\1\u0242\1\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\23\37\1\u0243\1\0\2\37"+
    "\1\u0243\7\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\u0244\1\0\10\37\27\0\22\37"+
    "\1\u0244\1\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\24\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\1\37\1\u0245\1\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\5\37\1\u0246\16\37\1\0\3\37"+
    "\1\u0246\6\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\u0247\1\0\10\37\27\0\22\37"+
    "\1\u0247\1\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\14\37\1\u0248\7\37\1\0\1\37\1\u0248\10\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\7\37\1\u0249\14\37"+
    "\1\0\5\37\1\u0249\4\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\24\37\1\0\11\37\1\u024a\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\7\0\1\u024b\2\0\3\u024b\1\0"+
    "\2\u024b\30\0\24\u024b\1\0\12\u024b\1\0\4\u024b\1\0"+
    "\1\u024b\1\0\3\u024b\4\0\15\173\1\174\3\173\1\174"+
    "\14\173\1\174\4\173\1\174\5\173\1\u024c\22\173\1\u024c"+
    "\25\173\53\0\1\u024d\22\0\1\u024d\24\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\14\37\1\u024e\7\37\1\0"+
    "\1\37\1\u024e\10\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u024f\1\0\10\37\27\0"+
    "\22\37\1\u024f\1\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\11\37\1\u0250\12\37\1\0\6\37\1\u0250"+
    "\3\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\7\37\1\u0251"+
    "\14\37\1\0\5\37\1\u0251\4\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\11\37\1\u0252\12\37\1\0\6\37\1\u0252"+
    "\3\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\24\37\1\0"+
    "\11\37\1\u0253\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\24\37"+
    "\1\0\12\37\1\0\1\u0254\3\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\1\u0255\11\37\1\u0255\11\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\21\0\1\u01dd\3\0\1\u01de"+
    "\115\0\1\u0256\3\0\1\u0257\171\0\1\u0258\3\0\1\u0258"+
    "\25\0\1\37\1\0\1\u0259\1\0\10\37\27\0\22\37"+
    "\1\u0259\1\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\23\37\1\u025a\1\0\2\37\1\u025a\7\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\2\37\1\u025b\10\37\1\u025b"+
    "\10\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\7\37\1\u025c\14\37\1\0\5\37\1\u025c\4\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\u025d\1\0\10\37\27\0\22\37\1\u025d\1\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\2\37\1\u025e"+
    "\10\37\1\u025e\10\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\4\37\1\u025f\14\37\1\u025f\2\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\23\37\1\u0260"+
    "\1\0\2\37\1\u0260\7\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\u0261\1\0\10\37"+
    "\27\0\22\37\1\u0261\1\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\11\37\1\u0262\12\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\u0263\1\0\10\37\27\0\22\37\1\u0263\1\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\24\37"+
    "\1\0\10\37\1\u0264\1\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\11\37\1\u0265\12\37\1\0\6\37\1\u0265\3\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\7\37\1\u0266\14\37"+
    "\1\0\5\37\1\u0266\4\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\u0267\1\0\10\37"+
    "\27\0\22\37\1\u0267\1\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\13\0\1\u0268\5\0\2\u023d"+
    "\2\0\1\u023d\32\0\1\u0268\113\0\1\u0269\10\0\1\u0269"+
    "\45\0\1\u0209\62\0\1\u0209\36\0\1\u026a\62\0\1\u026a"+
    "\115\0\1\u0209\15\0\1\u0209\22\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\24\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\1\37\1\u026b\1\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\7\37\1\u026c\14\37"+
    "\1\0\5\37\1\u026c\4\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\14\37\1\u026d\7\37\1\0\1\37\1\u026d\10\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\24\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\1\37\1\u026e\1\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\7\37"+
    "\1\u026f\14\37\1\0\5\37\1\u026f\4\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\24\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\1\37\1\u0270\1\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\14\37\1\u0271\7\37"+
    "\1\0\1\37\1\u0271\10\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\24\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\1\37\1\u0272\1\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\1\u0273\11\37\1\u0273\11\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\u024b\1\0\1\u024b\1\0\10\u024b\27\0\24\u024b\1\0"+
    "\12\u024b\1\0\4\u024b\1\0\1\u024b\1\0\3\u024b\4\0"+
    "\15\173\1\174\3\173\1\174\14\173\1\174\4\173\1\174"+
    "\25\173\1\u0274\3\173\1\u0274\24\173\15\0\2\u0275\2\0"+
    "\1\u0275\101\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\2\37\1\u0276\10\37\1\u0276\10\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\2\37\1\u0277\10\37\1\u0277"+
    "\10\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\23\37\1\u0278\1\0\2\37\1\u0278\7\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u0279"+
    "\1\0\10\37\27\0\22\37\1\u0279\1\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\3\37\1\u027a\2\37"+
    "\1\u027a\15\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\21\0\1\u0256\157\0\1\u027b\22\0\1\u027b"+
    "\24\0\1\37\1\0\1\37\1\0\10\37\27\0\24\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\1\37"+
    "\1\u027c\1\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\7\37\1\u027d\14\37\1\0\5\37\1\u027d\4\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\23\37\1\u027e\1\0"+
    "\2\37\1\u027e\7\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\23\37\1\u027f\1\0\2\37\1\u027f\7\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\1\u0280\11\37\1\u0280\11\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\u0281\1\0\10\37\27\0\22\37\1\u0281"+
    "\1\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\24\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\1\37\1\u0282\1\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\22\37\1\u0283\1\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\3\37\1\u0284\2\37\1\u0284"+
    "\15\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\u0285\1\0\10\37\27\0"+
    "\22\37\1\u0285\1\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\u0286\1\0"+
    "\10\37\27\0\22\37\1\u0286\1\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\u0287\1\0\10\37\27\0\22\37\1\u0287\1\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\51\0"+
    "\1\u0288\13\0\1\u0288\107\0\1\u0209\2\0\1\u0209\114\0"+
    "\1\u0209\13\0\1\u0209\41\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\24\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\1\37\1\u0289\1\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\5\37\1\u028a\16\37\1\0"+
    "\3\37\1\u028a\6\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\24\37\1\0\1\u028b\3\37\1\u028b\5\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\24\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\1\37\1\u028c\1\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\24\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\1\37\1\u028d\1\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\24\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\1\37"+
    "\1\u028e\1\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\23\37\1\u028f\1\0\2\37\1\u028f\7\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\4\37\1\u0290\14\37\1\u0290"+
    "\2\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\4\0\15\173\1\174\3\173\1\174\14\173\1\174"+
    "\4\173\1\174\7\173\1\u0291\22\173\1\u0291\23\173\15\0"+
    "\2\u0275\2\0\1\u0275\33\0\1\u0292\21\0\1\u0292\23\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\23\37\1\u0293"+
    "\1\0\2\37\1\u0293\7\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\1\37\1\u0294\13\37\1\u0294\6\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\24\37\1\0\11\37"+
    "\1\u0295\1\0\4\37\1\0\1\37\1\0\3\37\34\0"+
    "\1\u0296\72\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\1\u0297\11\37\1\u0297\11\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u0298"+
    "\1\0\10\37\27\0\22\37\1\u0298\1\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\u0299\1\0\10\37\27\0\22\37\1\u0299\1\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\2\37\1\u029a\5\37"+
    "\27\0\10\37\1\u029a\13\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\1\u029b\11\37\1\u029b\11\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\1\u029c\11\37"+
    "\1\u029c\11\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\7\37\1\u029d\14\37\1\0\5\37\1\u029d\4\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\4\37\1\u029e\14\37"+
    "\1\u029e\2\37\1\0\12\37\1\0\4\37\1\0\1\37"+
    "\1\0\3\37\50\0\1\u029f\11\0\1\u029f\44\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\1\u02a0\11\37\1\u02a0"+
    "\11\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\2\37\1\u02a1\10\37\1\u02a1\10\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\24\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\1\37\1\u02a2\1\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\24\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\1\37\1\u02a3"+
    "\1\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\1\u02a4\11\37\1\u02a4\11\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\24\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\1\37\1\u02a5\1\37\4\0\15\173"+
    "\1\174\3\173\1\174\6\173\1\u02a6\5\173\1\174\4\173"+
    "\1\174\56\173\46\0\1\u02a7\10\0\1\u02a7\43\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\24\37\1\0\11\37"+
    "\1\u02a8\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\u02a9\1\0\10\37\27\0\22\37\1\u02a9"+
    "\1\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\21\0\2\u0296\2\0\1\u0296\101\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\3\37\1\u02aa\2\37\1\u02aa"+
    "\15\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\2\37\1\u02ab"+
    "\5\37\27\0\10\37\1\u02ab\13\37\1\0\12\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\5\0\1\37\1\0"+
    "\1\37\1\0\10\37\27\0\3\37\1\u02ac\2\37\1\u02ac"+
    "\15\37\1\0\12\37\1\0\4\37\1\0\1\37\1\0"+
    "\3\37\5\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\14\37\1\u02ad\7\37\1\0\1\37\1\u02ad\10\37\1\0"+
    "\4\37\1\0\1\37\1\0\3\37\111\0\1\u02ae\15\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\3\37\1\u02af"+
    "\2\37\1\u02af\15\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\23\37\1\u02b0\1\0\2\37\1\u02b0\7\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\24\37\1\0\12\37"+
    "\1\0\1\37\1\u02b1\2\37\1\0\1\37\1\0\3\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\24\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\1\37"+
    "\1\u02b2\1\37\4\0\15\173\1\u02b3\1\u02a6\2\173\1\u02b3"+
    "\14\173\1\174\4\173\1\174\56\173\47\0\1\u02b4\2\0"+
    "\1\u02b4\50\0\1\37\1\0\1\37\1\0\10\37\27\0"+
    "\23\37\1\u02b5\1\0\2\37\1\u02b5\7\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\37"+
    "\1\0\10\37\27\0\23\37\1\u02b6\1\0\2\37\1\u02b6"+
    "\7\37\1\0\4\37\1\0\1\37\1\0\3\37\5\0"+
    "\1\37\1\0\1\37\1\0\10\37\27\0\24\37\1\0"+
    "\12\37\1\0\4\37\1\0\1\37\1\0\1\37\1\u02b7"+
    "\1\37\5\0\1\37\1\0\1\u02b8\1\0\10\37\27\0"+
    "\22\37\1\u02b8\1\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\3\37\5\0\1\37\1\0\1\37\1\0"+
    "\10\37\27\0\24\37\1\0\1\u02b9\3\37\1\u02b9\5\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\66\0\1\u02ba"+
    "\15\0\1\u02ba\22\0\1\37\1\0\1\u02bb\1\0\10\37"+
    "\27\0\22\37\1\u02bb\1\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\5\0\1\37\1\0\1\u02bc"+
    "\1\0\10\37\27\0\22\37\1\u02bc\1\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\5\0\1\37"+
    "\1\0\1\37\1\0\10\37\27\0\24\37\1\0\12\37"+
    "\1\0\4\37\1\0\1\37\1\0\1\37\1\u02bd\1\37"+
    "\5\0\1\37\1\0\1\37\1\0\10\37\27\0\24\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\1\37"+
    "\1\u02be\1\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\5\37\1\u02bf\16\37\1\0\3\37\1\u02bf\6\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\105\0\1\u02c0"+
    "\21\0\1\37\1\0\1\37\1\0\10\37\27\0\24\37"+
    "\1\0\12\37\1\0\4\37\1\0\1\37\1\0\1\37"+
    "\1\u02c1\1\37\5\0\1\37\1\0\1\37\1\0\10\37"+
    "\27\0\11\37\1\u02c2\12\37\1\0\6\37\1\u02c2\3\37"+
    "\1\0\4\37\1\0\1\37\1\0\3\37\52\0\1\u02c3"+
    "\10\0\1\u02c3\43\0\1\37\1\0\1\u02c4\1\0\10\37"+
    "\27\0\22\37\1\u02c4\1\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\66\0\1\u02c5\15\0\1\u02c5"+
    "\22\0\1\37\1\0\1\37\1\0\10\37\27\0\1\37"+
    "\1\u02c6\13\37\1\u02c6\6\37\1\0\12\37\1\0\4\37"+
    "\1\0\1\37\1\0\3\37\7\0\1\u02c7\62\0\1\u02c7"+
    "\50\0\2\u02c7\2\0\1\u02c7\5\0\1\u02c8\107\0\2\u02c8"+
    "\2\0\1\u02c8\1\0\1\u02c9\45\0\1\u02ca\3\0\1\u02ca"+
    "\5\0\1\u02cb\107\0\1\u02cc\3\0\1\u02cc\126\0\1\u02cd"+
    "\110\0\1\u02ce\3\0\1\u02ce\126\0\1\u02cf\110\0\1\u02d0"+
    "\3\0\1\u02d0\126\0\1\u02d1\110\0\1\u02d2\3\0\1\u02d2"+
    "\41\0\2\u02d0\2\0\1\u02d0\6\0\1\u02d3\162\0\1\u02d4"+
    "\3\0\1\u02d4\47\0\1\u02d0\201\0\1\u02d0\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[46986];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\23\0\2\1\1\11\12\1\2\11\2\1\3\11\13\1"+
    "\1\11\32\1\2\11\2\1\1\11\6\1\1\11\2\1"+
    "\1\11\7\1\1\11\4\1\1\0\1\1\1\11\2\1"+
    "\1\11\3\1\1\11\1\1\1\11\1\1\1\11\4\0"+
    "\1\1\1\11\4\1\1\11\2\1\1\0\2\1\1\0"+
    "\1\1\2\0\6\1\1\11\2\0\4\1\1\0\1\1"+
    "\1\0\1\1\2\0\1\11\2\0\2\1\1\0\52\1"+
    "\1\0\2\1\1\11\12\0\1\1\3\0\3\1\3\11"+
    "\1\1\3\0\3\1\1\11\4\0\1\1\2\0\1\11"+
    "\2\0\1\11\7\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\1\1\0\1\11\1\0\2\11\2\1\1\11\3\0"+
    "\15\1\1\0\1\1\3\0\56\1\12\0\10\1\1\11"+
    "\2\1\1\0\1\1\1\0\1\11\1\0\1\11\1\1"+
    "\1\0\1\11\1\0\1\1\1\0\2\11\1\1\2\0"+
    "\20\1\4\0\53\1\12\0\11\1\1\0\1\11\1\0"+
    "\1\1\1\11\1\0\15\1\1\11\1\1\3\0\43\1"+
    "\10\0\1\11\1\0\13\1\1\0\11\1\3\0\26\1"+
    "\5\0\24\1\1\11\1\1\1\0\17\1\3\0\12\1"+
    "\1\0\5\1\1\0\14\1\1\0\11\1\1\0\14\1"+
    "\1\0\7\1\1\0\6\1\1\11\5\1\1\0\5\1"+
    "\1\0\5\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\14\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[724];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    private final ByteStack stack = new ByteStack();
    private String heredoc = null;
    private int hereocLength = 0;
    private boolean aspTagsAllowed;
    private boolean shortTagsAllowed;
    private LexerInput input;

    public PHP5ColoringLexer(LexerRestartInfo info, boolean shortTagsAllowed, boolean aspTagsAllowed, boolean inPHP) {
        this.input = info.input();
        this.aspTagsAllowed = aspTagsAllowed;
        this.shortTagsAllowed = shortTagsAllowed;

        if (info.state() != null) {
            //reset state
            setState((LexerState) info.state());
        } else {
            //initial state
            stack.push(YYINITIAL);
            if (inPHP) {
                stack.push(ST_PHP_IN_SCRIPTING);
                zzState = ST_PHP_IN_SCRIPTING;
                zzLexicalState = ST_PHP_IN_SCRIPTING;
            } else {
                zzState = YYINITIAL;
                zzLexicalState = YYINITIAL;
            }
        }

    }

    public static final class LexerState  {
        final ByteStack stack;
        /* the current state of the DFA */
        final int zzState;
        /* the current lexical state */
        final int zzLexicalState;
        /* remember the heredoc */
        final String heredoc;
        /* and the lenght of */
        final int hereocLength;

        LexerState(ByteStack stack, int zzState, int zzLexicalState, String heredoc, int hereocLength) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.heredoc = heredoc;
            this.hereocLength = hereocLength;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null || obj.getClass() != this.getClass()) {
                return false;
            }

            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                && (this.zzLexicalState == state.zzLexicalState)
                && (this.hereocLength == state.hereocLength)
                && ((this.heredoc == null && state.heredoc == null) || (this.heredoc != null && state.heredoc != null && this.heredoc.equals(state.heredoc))));
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            if (stack != null) {
                hash = 31 * hash + this.stack.hashCode();
            }
            hash = 31 * hash + this.hereocLength;
            if (heredoc != null) {
                hash = 31 * hash + this.heredoc.hashCode();
            }
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.copyOf(), zzState, zzLexicalState, heredoc, hereocLength);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
        this.heredoc = state.heredoc;
        this.hereocLength = state.hereocLength;
    }

    protected boolean isHeredocState(int state) {
        return state == ST_PHP_HEREDOC || state == ST_PHP_START_HEREDOC || state == ST_PHP_END_HEREDOC || state == ST_PHP_NOWDOC;
    }

    public int[] getParamenters() {
        return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }

    protected int getZZStartRead() {
        return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
        return this.zzPushbackPos;
    }

    protected void pushBack(int i) {
        yypushback(i);
    }

    protected void popState() {
        yybegin(stack.pop());
    }

    protected void pushState(final int state) {
        stack.push(getZZLexicalState());
        yybegin(state);
    }


 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PHP5ColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PHP5ColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1772) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PHPTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();

            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24:
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens
    return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 154: break;
        case 89:
          { return PHPTokenId.PHP_FALSE;
          }
        case 155: break;
        case 21:
          { yypushback(1);
    yybegin(ST_PHP_NOWDOC);
          }
        case 156: break;
        case 27:
          { String yytext = yytext();
    switch (yytext.charAt(yytext.length() - 1)) {
        case '?':
        case '%':
            yypushback(1);
            break;
        default:
            popState();
    }
     return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 157: break;
        case 68:
          { yypushback(2);
        return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 158: break;
        case 55:
          { popState();
    return PHPTokenId.PHPDOC_COMMENT_END;
          }
        case 159: break;
        case 124:
          { return PHPTokenId.PHP_INCLUDE;
          }
        case 160: break;
        case 29:
          { return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 161: break;
        case 143:
          { return PHPTokenId.PHP_ENDDECLARE;
          }
        case 162: break;
        case 114:
          { return PHPTokenId.PHP_GLOBAL;
          }
        case 163: break;
        case 150:
          { return PHPTokenId.PHP__FUNCTION__;
          }
        case 164: break;
        case 17:
          { popState();
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 165: break;
        case 33:
          { if (shortTagsAllowed ) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 166: break;
        case 47:
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 167: break;
        case 80:
          { return PHPTokenId.PHP_LIST;
          }
        case 168: break;
        case 88:
          { return PHPTokenId.PHP_EMPTY;
          }
        case 169: break;
        case 14:
          { pushState(ST_PHP_LINE_COMMENT);
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 170: break;
        case 85:
          { return PHPTokenId.PHP_CASE;
          }
        case 171: break;
        case 35:
          { return PHPTokenId.PHP_VARIABLE;
          }
        case 172: break;
        case 38:
          { //popState();
        yybegin(YYINITIAL);
        if (yylength() > 2) {
            yypushback(yylength()-2);
        }
        stack.clear();
    return PHPTokenId.PHP_CLOSETAG;
          }
        case 173: break;
        case 37:
          { if (aspTagsAllowed) {
            yybegin(YYINITIAL);
            stack.clear();
        return PHPTokenId.PHP_CLOSETAG;
    }
    return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 174: break;
        case 28:
          { return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 175: break;
        case 77:
          { pushState(ST_PHP_DOC_COMMENT);
    yypushback(yylength()-3);
    return PHPTokenId.PHPDOC_COMMENT_START;
          }
        case 176: break;
        case 94:
          { return PHPTokenId.PHP_ISSET;
          }
        case 177: break;
        case 133:
          { return PHPTokenId.PHP__FILE__;
          }
        case 178: break;
        case 42:
          { return PHPTokenId.PHP_IF;
          }
        case 179: break;
        case 48:
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 180: break;
        case 57:
          { if (aspTagsAllowed) {
            yybegin(YYINITIAL);
            stack.clear();
        return PHPTokenId.PHP_CLOSETAG;
    }
    String text = yytext();
    if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
        popState();
    }
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 181: break;
        case 40:
          { return PHPTokenId.PHP_AS;
          }
        case 182: break;
        case 43:
          { pushState(ST_PHP_LOOKING_FOR_CLASS_CONST);
    return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 183: break;
        case 152:
          { pushState(ST_HALTED_COMPILER);
    return PHPTokenId.PHP_HALT_COMPILER;
          }
        case 184: break;
        case 65:
          { return PHPTokenId.PHP_USE;
          }
        case 185: break;
        case 97:
          { return PHPTokenId.PHP_TYPE_FLOAT;
          }
        case 186: break;
        case 151:
          { return PHPTokenId.PHP__NAMESPACE__;
          }
        case 187: break;
        case 56:
          { popState();
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 188: break;
        case 149:
          { return PHPTokenId.PHP_INCLUDE_ONCE;
          }
        case 189: break;
        case 136:
          { return PHPTokenId.PHP_NAMESPACE;
          }
        case 190: break;
        case 54:
          { popState();
    return PHPTokenId.PHP_COMMENT_END;
          }
        case 191: break;
        case 130:
          { return PHPTokenId.PHP_ITERABLE;
          }
        case 192: break;
        case 92:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    hereocLength = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        hereocLength--;
    }
    // HEREDOC PHP 5.3
    if (yytext().charAt(startString) == '"') {
        hereocLength -= 2;
        startString ++;
    }
    heredoc = yytext().substring(startString,hereocLength+startString);
    yybegin(ST_PHP_START_HEREDOC);
    return PHPTokenId.PHP_HEREDOC_TAG_START;
          }
        case 193: break;
        case 31:
          { popState();
    return PHPTokenId.T_INLINE_HTML;
          }
        case 194: break;
        case 6:
          { return PHPTokenId.PHP_OPERATOR;
          }
        case 195: break;
        case 11:
          { pushState(ST_PHP_BACKQUOTE);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 196: break;
        case 44:
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 197: break;
        case 3:
          { return PHPTokenId.PHP_NUMBER;
          }
        case 198: break;
        case 66:
          { yypushback(1);
    pushState(ST_PHP_VAR_OFFSET);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 199: break;
        case 121:
          { return PHPTokenId.PHP_REQUIRE;
          }
        case 200: break;
        case 123:
          { return PHPTokenId.PHP_DECLARE;
          }
        case 201: break;
        case 100:
          { return PHPTokenId.PHP_CLONE;
          }
        case 202: break;
        case 95:
          { return PHPTokenId.PHP_TRAIT;
          }
        case 203: break;
        case 46:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_TOKEN;
          }
        case 204: break;
        case 60:
          { return PHPTokenId.PHP_NEW;
          }
        case 205: break;
        case 71:
          { yypushback(2);
    return PHPTokenId.PHP_COMMENT;
          }
        case 206: break;
        case 53:
          { return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 207: break;
        case 18:
          { yypushback(1);
        popState();
          }
        case 208: break;
        case 117:
          { return PHPTokenId.PHP_EXTENDS;
          }
        case 209: break;
        case 78:
          { return PHPTokenId.PHP_NULL;
          }
        case 210: break;
        case 86:
          { pushState(ST_PHP_IN_SCRIPTING);
    //yybegin(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_OPENTAG;
    //return createSymbol(ASTSymbol.T_OPEN_TAG);
          }
        case 211: break;
        case 105:
          { return PHPTokenId.PHP_WHILE;
          }
        case 212: break;
        case 135:
          { return PHPTokenId.PHP_ENDSWITCH;
          }
        case 213: break;
        case 125:
          { return PHPTokenId.PHP_PRIVATE;
          }
        case 214: break;
        case 1:
          { return PHPTokenId.T_INLINE_HTML;
          }
        case 215: break;
        case 146:
          { return PHPTokenId.PHP_YIELD_FROM;
          }
        case 216: break;
        case 87:
          { return PHPTokenId.PHP_ENDIF;
          }
        case 217: break;
        case 25:
          { yypushback(1);
    popState();
        if (yylength() > 0)
            return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 218: break;
        case 111:
          { return PHPTokenId.PHP_STATIC;
          }
        case 219: break;
        case 128:
          { return PHPTokenId.PHP_FUNCTION;
          }
        case 220: break;
        case 122:
          { return PHPTokenId.PHP_DEFAULT;
          }
        case 221: break;
        case 16:
          { return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 222: break;
        case 26:
          { popState();
    return PHPTokenId.PHP_TOKEN;
          }
        case 223: break;
        case 34:
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 224: break;
        case 134:
          { return PHPTokenId.PHP__LINE__;
          }
        case 225: break;
        case 73:
          { return PHPTokenId.PHP_EXIT;
          }
        case 226: break;
        case 32:
          { if (aspTagsAllowed) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 227: break;
        case 36:
          { pushState(ST_PHP_COMMENT);
    return PHPTokenId.PHP_COMMENT_START;
          }
        case 228: break;
        case 91:
          { return PHPTokenId.PHP_BREAK;
          }
        case 229: break;
        case 20:
          { yypushback(1);
        yybegin(ST_PHP_HEREDOC);
          }
        case 230: break;
        case 138:
          { return PHPTokenId.PHP_INSTEADOF;
          }
        case 231: break;
        case 19:
          { yypushback(yylength());
        popState();
          }
        case 232: break;
        case 139:
          { return PHPTokenId.PHP_PROTECTED;
          }
        case 233: break;
        case 58:
          { String text = yytext();
    if ((text.charAt(1)=='%' && aspTagsAllowed)
        || (text.charAt(1)=='?')) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.T_OPEN_TAG_WITH_ECHO;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 234: break;
        case 102:
          { return PHPTokenId.PHP_PRINT;
          }
        case 235: break;
        case 98:
          { return PHPTokenId.PHP_CONST;
          }
        case 236: break;
        case 64:
          { return PHPTokenId.PHP_VAR;
          }
        case 237: break;
        case 153:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.T_INLINE_HTML;
          }
        case 238: break;
        case 96:
          { return PHPTokenId.PHP_THROW;
          }
        case 239: break;
        case 115:
          { return PHPTokenId.PHP_PARENT;
          }
        case 240: break;
        case 113:
          { return PHPTokenId.PHP_SWITCH;
          }
        case 241: break;
        case 69:
          { int trailingNewLineLength = 1;
        int label_len = yylength() - trailingNewLineLength;
        int back = trailingNewLineLength;

        if (yytext().charAt(label_len-1)==';') {
           label_len--;
           back++;
        }
        if (label_len > hereocLength && yytext().substring(label_len - hereocLength,label_len).equals(heredoc)) {
            back = back + hereocLength;
            yypushback(back);
            yybegin(ST_PHP_END_HEREDOC);
        } else {
            yypushback(trailingNewLineLength);
            return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
        }
          }
        case 242: break;
        case 72:
          { yypushback(2); // go back to mark end of comment in the next token
        return PHPTokenId.PHPDOC_COMMENT;
          }
        case 243: break;
        case 62:
          { return PHPTokenId.PHP_TYPE_INT;
          }
        case 244: break;
        case 106:
          { return PHPTokenId.PHP_CASTING;
          }
        case 245: break;
        case 39:
          { return PHPTokenId.PHP_TEXTUAL_OPERATOR;
          }
        case 246: break;
        case 30:
          { popState();return PHPTokenId.WHITESPACE;
          }
        case 247: break;
        case 61:
          { return PHPTokenId.PHP_DIE;
          }
        case 248: break;
        case 8:
          { return PHPTokenId.PHP_SEMICOLON;
          }
        case 249: break;
        case 141:
          { return PHPTokenId.PHP__CLASS__;
          }
        case 250: break;
        case 70:
          { int label_len = yylength() - 1;
    int back = 1;

    if (yytext().charAt(label_len-1)==';') {
       label_len--;
           back++;
    }
    if (label_len > hereocLength && yytext().substring(label_len - hereocLength,label_len).equals(heredoc)) {
        back = back + hereocLength;
        yypushback(back);
        yybegin(ST_PHP_END_NOWDOC);
    }
    else {
        yypushback(1);
    }
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 251: break;
        case 2:
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 252: break;
        case 101:
          { return PHPTokenId.PHP_CLASS;
          }
        case 253: break;
        case 119:
          { return PHPTokenId.PHP_FINALLY;
          }
        case 254: break;
        case 137:
          { return PHPTokenId.PHP_INTERFACE;
          }
        case 255: break;
        case 140:
          { return PHPTokenId.PHP__TRAIT__;
          }
        case 256: break;
        case 103:
          { return PHPTokenId.PHP_UNSET;
          }
        case 257: break;
        case 12:
          { return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 258: break;
        case 22:
          { yypushback(1);
    popState();
          }
        case 259: break;
        case 116:
          { return PHPTokenId.PHP_PUBLIC;
          }
        case 260: break;
        case 148:
          { return PHPTokenId.PHP_REQUIRE_ONCE;
          }
        case 261: break;
        case 142:
          { return PHPTokenId.PHP_ENDFOREACH;
          }
        case 262: break;
        case 112:
          { return PHPTokenId.PHP_TYPE_STRING;
          }
        case 263: break;
        case 75:
          { return PHPTokenId.PHP_EVAL;
          }
        case 264: break;
        case 82:
          { return PHPTokenId.PHP_GOTO;
          }
        case 265: break;
        case 107:
          { popState();
        return PHPTokenId.PHP_STRING;
          }
        case 266: break;
        case 129:
          { return PHPTokenId.PHP_ABSTRACT;
          }
        case 267: break;
        case 9:
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 268: break;
        case 76:
          { return PHPTokenId.PHP_ECHO;
          }
        case 269: break;
        case 90:
          { return PHPTokenId.PHP_FINAL;
          }
        case 270: break;
        case 147:
          { return PHPTokenId.PHP__METHOD__;
          }
        case 271: break;
        case 10:
          { return PHPTokenId.PHP_NS_SEPARATOR;
          }
        case 272: break;
        case 104:
          { return PHPTokenId.PHP_YIELD;
          }
        case 273: break;
        case 126:
          { return PHPTokenId.PHP__DIR__;
          }
        case 274: break;
        case 5:
          { return  PHPTokenId.PHP_STRING;
          }
        case 275: break;
        case 131:
          { return PHPTokenId.PHP_CONTINUE;
          }
        case 276: break;
        case 145:
          { return PHPTokenId.PHP_IMPLEMENTS;
          }
        case 277: break;
        case 63:
          { return PHPTokenId.PHP_TRY;
          }
        case 278: break;
        case 93:
          { return PHPTokenId.PHP_ARRAY;
          }
        case 279: break;
        case 7:
          { return PHPTokenId.WHITESPACE;
          }
        case 280: break;
        case 110:
          { return PHPTokenId.PHP_RETURN;
          }
        case 281: break;
        case 4:
          { return PHPTokenId.PHP_TOKEN;
          }
        case 282: break;
        case 15:
          { return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 283: break;
        case 99:
          { return PHPTokenId.PHP_CATCH;
          }
        case 284: break;
        case 67:
          { String text = yytext();
        int lastIndexOfDollar = text.lastIndexOf('$');
        yypushback(text.length() - lastIndexOfDollar);
        return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 285: break;
        case 132:
          { return PHPTokenId.PHP_CALLABLE;
          }
        case 286: break;
        case 144:
          { return PHPTokenId.PHP_INSTANCEOF;
          }
        case 287: break;
        case 50:
          { heredoc=null;
    hereocLength=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 1;
    // mark just the label
    if (yytext().charAt(yylength() - 2)==';') {
        back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_HEREDOC_TAG_END;
          }
        case 288: break;
        case 120:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
        int startString=3+bprefix;
        /* 3 is <<<, 2 is quotes, 1 is newline */
        hereocLength = yylength()-bprefix-3-2-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
        while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
            startString++;
            hereocLength--;
        }
        // first quate
        startString++;
        heredoc = yytext().substring(startString, hereocLength+startString);
        yybegin(ST_PHP_START_NOWDOC);
        return PHPTokenId.PHP_NOWDOC_TAG_START;
          }
        case 289: break;
        case 83:
          { return PHPTokenId.PHP_TYPE_BOOL;
          }
        case 290: break;
        case 108:
          { return PHPTokenId.PHP_ENDFOR;
          }
        case 291: break;
        case 59:
          { return PHPTokenId.PHP_FOR;
          }
        case 292: break;
        case 51:
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
        label_len--;
    }

    if (label_len==hereocLength && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        hereocLength=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_NOWDOC_TAG_END;
    } else {
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 293: break;
        case 118:
          { return PHPTokenId.PHP_FOREACH;
          }
        case 294: break;
        case 23:
          { popState();
    return PHPTokenId.PHP_STRING;
          }
        case 295: break;
        case 74:
          { return PHPTokenId.PHP_ELSE;
          }
        case 296: break;
        case 81:
          { return PHPTokenId.PHP_SELF;
          }
        case 297: break;
        case 52:
          { heredoc=null; hereocLength=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 1;
    // mark just the label
    if (yytext().charAt(yylength() - 2)==';') {
        back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_NOWDOC_TAG_END;
          }
        case 298: break;
        case 45:
          { yypushback(1);
    return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 299: break;
        case 13:
          { int lastState = stack.peek();
    if (lastState != ST_PHP_IN_SCRIPTING && lastState != YYINITIAL) {
        // probably in some sub state -> "{$" or "${"
        popState();
    }
    return PHPTokenId.PHP_CURLY_CLOSE;
          }
        case 300: break;
        case 41:
          { return PHPTokenId.PHP_DO;
          }
        case 301: break;
        case 49:
          { int trailingNewLineLength = 1;
        int label_len = yylength() - trailingNewLineLength;
        int back = trailingNewLineLength;

        if (yytext().charAt(label_len-1)==';') {
           label_len--;
           back++;
        }
        if (label_len == hereocLength && yytext().substring(label_len - hereocLength,label_len).equals(heredoc)) {
            back = back + hereocLength;
            yypushback(back);
            yybegin(ST_PHP_END_HEREDOC);
        } else {
            yypushback(yylength() - trailingNewLineLength);
            yybegin(ST_PHP_HEREDOC);
        }
          }
        case 302: break;
        case 84:
          { return PHPTokenId.PHP_TYPE_VOID;
          }
        case 303: break;
        case 127:
          { return PHPTokenId.PHP_ENDWHILE;
          }
        case 304: break;
        case 109:
          { return PHPTokenId.PHP_ELSEIF;
          }
        case 305: break;
        case 79:
          { return PHPTokenId.PHP_TRUE;
          }
        case 306: break;
        default:
          if (zzInput == YYEOF)
            //zzAtEOF = true;
            switch (zzLexicalState) {
            case ST_PHP_COMMENT: {
              if (input.readLength() > 0) {
                input.backup(1);  // backup eof
                return PHPTokenId.PHP_COMMENT;
              }
              else {
                  return null;
              }
            }
            case 725: break;
            case ST_PHP_DOC_COMMENT: {
              if (input.readLength() > 0) {
                    input.backup(1);  // backup eof
                    return PHPTokenId.PHPDOC_COMMENT;
                }
                else {
                    return null;
                }
            }
            case 726: break;
            default:
              {        if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return PHPTokenId.UNKNOWN_TOKEN;
        } else {
            return null;
        }
 }
            }

          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
